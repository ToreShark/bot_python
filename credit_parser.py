import re
from typing import Dict, List

def detect_report_format(text: str) -> str:
    if "–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ" in text or "“ö–û–õ–î–ê–ù–´–°–¢–ê“í–´ –®–ê–†–¢–¢–ê–†" in text:
        return "detailed"
    elif "–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏/–≤–∞–ª—é—Ç–∞" in text:
        return "short"
    return "unknown"

def extract_credit_data_with_total(text: str) -> Dict:
    obligations = []
    total_monthly_payment = 0.0
    total_overdue_creditors = 0
    total_debt = 0.0
    lines = text.splitlines()

    format_type = detect_report_format(text)

    # --- –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç (–ü–ö–ë) ---
    if format_type == "detailed":
        if "“ö–û–õ–î–ê–ù–´–°–¢–ê“í–´ –®–ê–†–¢–¢–ê–†" in text:
            text = text.split("“ö–û–õ–î–ê–ù–´–°–¢–ê“í–´ –®–ê–†–¢–¢–ê–†")[1]
        if "–ê–Ø“ö–¢–ê–õ“í–ê–ù –®–ê–†–¢–¢–ê–†" in text:
            text = text.split("–ê–Ø“ö–¢–ê–õ“í–ê–ù –®–ê–†–¢–¢–ê–†")[0]

        blocks = re.split(r"(?:–ú—ñ–Ω–¥–µ—Ç—Ç–µ–º–µ|–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ)\s+\d+", text)
        for block in blocks[1:]:
            creditor_match = re.search(r"–ö—Ä–µ–¥–∏—Ç–æ—Ä:\s*(.+)", block)
            payment_match = re.search(
                r"(?:–ê–π —Å–∞–π—ã–Ω“ì—ã —Ç”©–ª–µ–º —Å–æ–º–∞—Å—ã|–°—É–º–º–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞).+?([\d\s.,]+)\s*KZT", block
            )
            balance_match = re.search(
                r"(?:–ê–ª–¥–∞“ì—ã —Ç”©–ª–µ–º–¥–µ—Ä —Å–æ–º–∞—Å—ã|–°—É–º–º–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π).+?([\d\s.,]+)\s*KZT", block
            )
            overdue_match = re.search(r"(?:–®–∞—Ä—Ç—Ç—ã“£ –º”ô—Ä—Ç–µ–±–µ—Å—ñ|–°—Ç–∞—Ç—É—Å –¥–æ–≥–æ–≤–æ—Ä–∞):\s*(.+)", block)
            overdue_days_match = re.search(r"(\d+)\s*(?:–∫“Ø–Ω|–¥–Ω(?:–µ–π|—è))", block)

            creditor = creditor_match.group(1).strip() if creditor_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            monthly_payment = (
                float(payment_match.group(1).replace(" ", "").replace(",", "."))
                if payment_match else 0.0
            )
            balance = (
                float(balance_match.group(1).replace(" ", "").replace(",", "."))
                if balance_match else 0.0
            )
            overdue_text = overdue_match.group(1).strip() if overdue_match else "–Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–∫–∏"
            overdue_days = int(overdue_days_match.group(1)) if overdue_days_match else 0

            if balance == 0.0:
                continue

            obligations.append({
                "creditor": creditor,
                "monthly_payment": monthly_payment,
                "balance": round(balance, 2),
                "overdue_days": overdue_days,
                "overdue_status": overdue_text
            })

            total_monthly_payment += monthly_payment
            if overdue_days > 0:
                total_overdue_creditors += 1

    # --- –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç (–ü–ö–ë/–ì–ö–ë) ---
    elif format_type == "short":
        for i, line in enumerate(lines):
            if "–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏/–≤–∞–ª—é—Ç–∞" in line:
                try:
                    total_debt_line = lines[i + 1]
                    total_debt = float(total_debt_line.replace(" ", "").replace(",", ".").replace("KZT", ""))
                except:
                    total_debt = 0.0

            if re.match(r"^[\d\s.,]+ KZT$", line.strip()):
                try:
                    balance = float(line.replace(" ", "").replace(",", ".").replace("KZT", ""))
                    overdue_line = lines[i + 1].strip()
                    if re.match(r"^\d+$", overdue_line):
                        overdue_days = int(overdue_line)
                        creditor = lines[i - 2].strip()
                        contract = lines[i - 1].strip()

                        if len(creditor) < 4 or balance == 0:
                            continue

                        obligations.append({
                            "creditor": creditor,
                            "contract": contract,
                            "balance": round(balance, 2),
                            "monthly_payment": 0.0,
                            "overdue_days": overdue_days,
                            "overdue_status": "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                        })

                        if overdue_days > 0:
                            total_overdue_creditors += 1
                except:
                    continue

    # –ï—Å–ª–∏ detailed-—Ñ–æ—Ä–º–∞, —Ç–æ total_debt —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ —Å—É–º–º—ã –±–∞–ª–∞–Ω—Å–æ–≤
    if format_type == "detailed":
        total_debt = sum(o["balance"] for o in obligations)

    return {
        "total_debt": round(total_debt, 2),
        "total_monthly_payment": round(total_monthly_payment, 2),
        "total_obligations": len(obligations),
        "overdue_obligations": total_overdue_creditors,
        "obligations": obligations
    }

def format_summary(data: Dict) -> str:
    return (
        f"üìä –ò—Ç–æ–≥ –ø–æ –≤–∞—à–µ–º—É –∫—Ä–µ–¥–∏—Ç–Ω–æ–º—É –æ—Ç—á—ë—Ç—É:\n"
        f"‚Äî –í—Å–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤: {data['total_obligations']}\n"
        f"‚Äî –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤: {data['overdue_obligations']}\n"
        f"‚Äî –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: {data['total_debt']:,} ‚Ç∏\n"
        f"‚Äî –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂: {data['total_monthly_payment']:,} ‚Ç∏"
    )
