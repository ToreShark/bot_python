import re
from typing import Dict, List

def extract_credit_data_with_total(text: str) -> Dict:
    obligations = []
    total_monthly_payment = 0.0
    total_overdue_creditors = 0

    if "“ö–û–õ–î–ê–ù–´–°–¢–ê“í–´ –®–ê–†–¢–¢–ê–†" in text:
        text = text.split("“ö–û–õ–î–ê–ù–´–°–¢–ê“í–´ –®–ê–†–¢–¢–ê–†")[1]
    if "–ê–Ø“ö–¢–ê–õ“í–ê–ù –®–ê–†–¢–¢–ê–†" in text:
        text = text.split("–ê–Ø“ö–¢–ê–õ“í–ê–ù –®–ê–†–¢–¢–ê–†")[0]

    blocks = re.split(r"(?:–ú—ñ–Ω–¥–µ—Ç—Ç–µ–º–µ|–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ)\s+\d+", text)

    for block in blocks[1:]:
        creditor_match = re.search(r"–ö—Ä–µ–¥–∏—Ç–æ—Ä:\s*(.+)", block)
        payment_match = re.search(
            r"(?:–ê–π —Å–∞–π—ã–Ω“ì—ã —Ç”©–ª–µ–º —Å–æ–º–∞—Å—ã|–°—É–º–º–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞).+?([\d\s.,]+)\s*KZT", block
        )
        balance_match = re.search(
            r"(?:–ê–ª–¥–∞“ì—ã —Ç”©–ª–µ–º–¥–µ—Ä —Å–æ–º–∞—Å—ã|–°—É–º–º–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π).+?([\d\s.,]+)\s*KZT", block
        )
        overdue_match = re.search(
            r"(?:–®–∞—Ä—Ç—Ç—ã“£ –º”ô—Ä—Ç–µ–±–µ—Å—ñ|–°—Ç–∞—Ç—É—Å –¥–æ–≥–æ–≤–æ—Ä–∞):\s*(.+)", block
        )
        overdue_days_match = re.search(r"(\d+)\s*(?:–∫“Ø–Ω|–¥–Ω(?:–µ–π|—è))", block)

        creditor = creditor_match.group(1).strip() if creditor_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        monthly_payment = (
            float(payment_match.group(1).replace(" ", "").replace(",", "."))
            if payment_match else 0.0
        )
        balance = (
            float(balance_match.group(1).replace(" ", "").replace(",", "."))
            if balance_match else 0.0
        )
        overdue_text = overdue_match.group(1).strip() if overdue_match else "–Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–∫–∏"
        overdue_days = int(overdue_days_match.group(1)) if overdue_days_match else 0

        if balance == 0.0:
            continue  # –∏—Å–∫–ª—é—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º

        obligations.append({
            "creditor": creditor,
            "monthly_payment": monthly_payment,
            "balance": round(balance, 2),
            "overdue_days": overdue_days,
            "overdue_status": overdue_text
        })

        total_monthly_payment += monthly_payment
        if overdue_days > 0:
            total_overdue_creditors += 1

    total_debt = sum(o["balance"] for o in obligations)

    return {
        "total_debt": round(total_debt, 2),
        "total_monthly_payment": round(total_monthly_payment, 2),
        "total_obligations": len(obligations),
        "overdue_obligations": total_overdue_creditors,
        "obligations": obligations
    }

def format_summary(data: Dict) -> str:
    return (
        f"üìä –ò—Ç–æ–≥ –ø–æ –≤–∞—à–µ–º—É –∫—Ä–µ–¥–∏—Ç–Ω–æ–º—É –æ—Ç—á—ë—Ç—É:\n"
        f"‚Äî –í—Å–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤: {data['total_obligations']}\n"
        f"‚Äî –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤: {data['overdue_obligations']}\n"
        f"‚Äî –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: {data['total_debt']:,} ‚Ç∏\n"
        f"‚Äî –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂: {data['total_monthly_payment']:,} ‚Ç∏"
    )
