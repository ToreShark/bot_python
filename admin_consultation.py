# admin_consultation.py

from telebot import types
from pymongo import MongoClient
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

load_dotenv()

MONGO_URI = os.getenv("MONGO_URI")
client = MongoClient(MONGO_URI)
db = client["telegram_bot"]

consultation_slots_collection = db["consultation_slots"]
consultation_queue_collection = db["consultation_queue"]

class AdminConsultationManager:
    def __init__(self, bot):
        self.bot = bot
        self.ADMIN_IDS = [376068212, 827743984]  # –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ ID

    def show_admin_menu(self, message):
        if message.from_user.id not in self.ADMIN_IDS:
            self.bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üìÖ –°–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="admin_slots_today"),
            types.InlineKeyboardButton("üóì –°–ª–æ—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="admin_slots_week"),
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data="admin_add_slot"),
            types.InlineKeyboardButton("üìã –û—á–µ—Ä–µ–¥—å –ø–æ —Å–ª–æ—Ç—É", callback_data="admin_view_queue"),
            types.InlineKeyboardButton("üì§ –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="admin_send_reminders")
        )

        self.bot.send_message(
            message.chat.id,
            "üë®‚Äçüíº *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup,
            parse_mode='Markdown'
        )

    def show_slots_today(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        if message.from_user.id not in self.ADMIN_IDS:
            self.bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        today = datetime.now().strftime("%Y-%m-%d")
        slots = consultation_slots_collection.find({
            "date": today
        }).sort("time_slot", 1)

        if slots.count() == 0:
            self.bot.send_message(message.chat.id, "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        text = f"üìÖ *–°–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è* ({today}):\n\n"
        for slot in slots:
            slot_id = slot["slot_id"]
            time_slot = slot["time_slot"]
            status = slot["status"]
            queue_count = consultation_queue_collection.count_documents({
                "slot_id": slot_id,
                "status": {"$nin": ["cancelled", "completed"]}
            })
            text += f"üïê `{time_slot}` | –°—Ç–∞—Ç—É—Å: *{status}* | –í –æ—á–µ—Ä–µ–¥–∏: *{queue_count}*\n"

        self.bot.send_message(
            chat_id=message.chat.id,
            text=text,
            parse_mode='Markdown'
        )

    def show_today_slots(self, message, user_id=None):
        if user_id is not None and user_id not in self.ADMIN_IDS:
            self.bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        today = datetime.now()
        today_str = today.strftime("%Y-%m-%d")
        readable_date = today.strftime("%d.%m.%Y")

        slots = list(consultation_slots_collection.find({"date": today_str}).sort("time_slot", 1))

        if not slots:
            self.bot.send_message(message.chat.id, f"üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è ({readable_date}) —Å–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        for slot in slots:
            slot_id = slot["slot_id"]
            time_slot = slot["time_slot"]
            status = slot["status"]

            # –û—á–µ—Ä–µ–¥—å
            queue = list(consultation_queue_collection.find({
                "slot_id": slot_id,
                "status": {"$nin": ["cancelled", "completed"]}
            }).sort("position", 1))
            queue_count = len(queue)

            # –ü–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏
            if queue:
                first_user = queue[0]
                name = first_user.get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                stat = first_user.get("status", "waiting")
                if stat == "waiting":
                    status_text = "–æ–∂–∏–¥–∞–µ—Ç"
                elif stat == "confirmed_day":
                    status_text = "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞ –¥–µ–Ω—å"
                elif stat == "confirmed_hour":
                    status_text = "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞ —á–∞—Å"
                else:
                    status_text = stat
                first_line = f"ü•á –ü–µ—Ä–≤—ã–π: {name} ({status_text})"
            else:
                first_line = "ü•á –ü–µ—Ä–≤—ã–π: ‚Äî"

            # –¢–µ–∫—Å—Ç —Å–ª–æ—Ç–∞
            text = (
                f"üïê *{time_slot}*\n"
                f"üë• –û—á–µ—Ä–µ–¥—å: {queue_count} —á–µ–ª–æ–≤–µ–∫(–∞)\n"
                f"{first_line}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: *{status}*"
            )

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            markup = types.InlineKeyboardMarkup(row_width=3)
            markup.add(
                types.InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏", callback_data=f"admin_slot_details_{slot_id}"),
                types.InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"admin_edit_slot_{slot_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_slot_{slot_id}")
            )

            self.bot.send_message(
                chat_id=message.chat.id,
                text=text,
                reply_markup=markup,
                parse_mode='Markdown'
            )

    def edit_slot_time(self, slot_id, new_time):
        """–ò–∑–º–µ–Ω—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–æ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ—Ç–∞
            slot = consultation_slots_collection.find_one({"slot_id": slot_id})
            if not slot:
                logger.warning(f"–°–ª–æ—Ç {slot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º
            date_str = slot["date"]
            new_slot_id = f"{date_str}_{new_time}"
            new_time_slot = f"{new_time}-{int(new_time.split(':')[0]) + 1:02d}:00"

            slot_datetime = datetime.strptime(f"{date_str} {new_time}", "%Y-%m-%d %H:%M")
            if slot_datetime <= datetime.now():
                logger.warning(f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è {new_time} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç
            consultation_slots_collection.update_one(
                {"slot_id": slot_id},
                {
                    "$set": {
                        "slot_id": new_slot_id,
                        "time_slot": new_time_slot
                    }
                }
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
            affected_users = list(consultation_queue_collection.find({"slot_id": slot_id}))
            for user in affected_users:
                consultation_queue_collection.update_one(
                    {"_id": user["_id"]},
                    {"$set": {"slot_id": new_slot_id}}
                )

            # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for user in affected_users:
                user_id = user["user_id"]
                position = user["position"]
                user_name = user.get("user_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                old_time = slot["time_slot"]
                formatted_date = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")

                text = (
                    f"‚ö†Ô∏è *–ò–ó–ú–ï–ù–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò*\n\n"
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
                    f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                    f"üïê –ë—ã–ª–æ: {old_time}\n"
                    f"üïê –°—Ç–∞–ª–æ: {new_time_slot}\n\n"
                    f"üìç –í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: *{position}*\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç."
                )

                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton(
                        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è",
                        callback_data=f"confirm_time_change_{user['_id']}"
                    ),
                    types.InlineKeyboardButton(
                        "‚ùå –û—Ç–º–µ–Ω—è—é –∑–∞–ø–∏—Å—å",
                        callback_data=f"cancel_due_time_change_{user['_id']}"
                    )
                )

                try:
                    self.bot.send_message(
                        chat_id=user_id,
                        text=text,
                        reply_markup=markup,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user_id}: {e}")

            logger.info(f"‚úÖ –°–ª–æ—Ç {slot_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –Ω–∞ {new_time}, —É–≤–µ–¥–æ–º–ª–µ–Ω–æ {len(affected_users)} —á–µ–ª–æ–≤–µ–∫.")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç–∞: {e}")

    def show_slot_details(self, call, slot_id):
        slot = consultation_slots_collection.find_one({"slot_id": slot_id})
        if not slot:
            self.bot.answer_callback_query(call.id, "‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        queue = list(consultation_queue_collection.find(
            {"slot_id": slot_id, "status": {"$nin": ["cancelled", "completed"]}}
        ).sort("position", 1))

        date_str = slot.get("date", "‚Äî")
        time_slot = slot.get("time_slot", "‚Äî")
        formatted_date = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")

        header = f"üìã *–î–ï–¢–ê–õ–ò –°–õ–û–¢–ê:* {formatted_date} {time_slot}\n\n"
        header += f"üë• *–û–ß–ï–†–ï–î–¨* ({len(queue)} —á–µ–ª–æ–≤–µ–∫):\n\n"

        medal_icons = ["ü•á", "ü•à", "ü•â"]
        text_lines = []
        markup = types.InlineKeyboardMarkup(row_width=2)

        for idx, user in enumerate(queue):
            user_name = user.get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            user_id = user.get("user_id", "‚Äî")
            status = user.get("status", "waiting")
            booking_id = user.get("_id")
            registered_at = user.get("registered_at")

            status_map = {
                "waiting": "–æ–∂–∏–¥–∞–µ—Ç",
                "confirmed_day": "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞ –¥–µ–Ω—å",
                "confirmed_hour": "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞ —á–∞—Å"
            }
            status_text = status_map.get(status, status)

            reg_dt = registered_at.strftime("%d.%m.%Y %H:%M") if registered_at else "‚Äî"
            icon = medal_icons[idx] if idx < 3 else f"{idx + 1}."

            text_lines.append(
                f"{icon} *{idx + 1}. {user_name}*\n"
                f"   üì± ID: `{user_id}`\n"
                f"   üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"   üìÖ –ó–∞–ø–∏—Å–∞–ª—Å—è: {reg_dt}"
            )

            markup.add(
                types.InlineKeyboardButton("‚ùå –£–±—Ä–∞—Ç—å", callback_data=f"admin_remove_user_{booking_id}"),
                types.InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"admin_message_user_{user_id}")
            )

        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ª–æ—Ç–∞–º", callback_data="admin_consultations"))

        full_text = header + "\n\n".join(text_lines)
        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=full_text,
            reply_markup=markup,
            parse_mode="Markdown"
        )
