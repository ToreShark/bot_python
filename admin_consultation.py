# admin_consultation.py

from telebot import types
from pymongo import MongoClient
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
from db import consultation_slots_collection, consultation_queue_collection
import threading
import time
from datetime import datetime, timedelta


load_dotenv()

DEBUG_MODE = os.getenv("DEBUG_MODE", "False").lower() == "true"
env = "dev" if DEBUG_MODE else "prod"
ADMIN_IDS = [376068212, 827743984]  # –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

class AdminConsultationManager:
    def __init__(self, bot, user_states_dict):
        self.bot = bot
        self.user_states = user_states_dict
        self.ADMIN_IDS = [376068212, 827743984]  # –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ ID

    def show_admin_menu(self, message):
        if message.from_user.id not in self.ADMIN_IDS:
            self.bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üìÖ –°–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="admin_slots_today"),
            types.InlineKeyboardButton("üóì –°–ª–æ—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="admin_slots_week"),
            # —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Å–ª–æ—Ç–∞–º /all_consultations
            types.InlineKeyboardButton("üìÖ –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Å–ª–æ—Ç–∞–º", callback_data="admin_all_slots"),
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data="admin_add_slot"),
            types.InlineKeyboardButton("üìã –û—á–µ—Ä–µ–¥—å –ø–æ —Å–ª–æ—Ç—É", callback_data="admin_view_queue"),
            types.InlineKeyboardButton("üì§ –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="admin_send_reminders")
        )

        self.bot.send_message(
            message.chat.id,
            "üë®‚Äçüíº *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup,
            parse_mode='Markdown'
        )

    def show_slots_today(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        if message.from_user.id not in self.ADMIN_IDS:
            self.bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        today = datetime.now().strftime("%Y-%m-%d")
        slots = consultation_slots_collection.find({
            "date": today
        }).sort("time_slot", 1)

        if slots.count() == 0:
            self.bot.send_message(message.chat.id, "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        text = f"üìÖ *–°–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è* ({today}):\n\n"
        for slot in slots:
            slot_id = slot["slot_id"]
            time_slot = slot["time_slot"]
            status = slot["status"]
            queue_count = consultation_queue_collection.count_documents({
                "slot_id": slot_id,
                "status": {"$nin": ["cancelled", "completed"]}
            })
            text += f"üïê `{time_slot}` | –°—Ç–∞—Ç—É—Å: *{status}* | –í –æ—á–µ—Ä–µ–¥–∏: *{queue_count}*\n"

        self.bot.send_message(
            chat_id=message.chat.id,
            text=text,
            parse_mode='Markdown'
        )

    def show_today_slots(self, message, user_id=None):
        if user_id is not None and user_id not in self.ADMIN_IDS:
            self.bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        today = datetime.now()
        today_str = today.strftime("%Y-%m-%d")
        readable_date = today.strftime("%d.%m.%Y")

        slots = list(consultation_queue_collection.find({"date": today_str}).sort("time_slot", 1))

        if not slots:
            self.bot.send_message(message.chat.id, f"üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è ({readable_date}) —Å–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        for slot in slots:
            slot_id = slot["slot_id"]
            time_slot = slot["time_slot"]
            status = slot["status"]

            # –û—á–µ—Ä–µ–¥—å
            queue = list(consultation_queue_collection.find({
                "slot_id": slot_id,
                "status": {"$nin": ["cancelled", "completed"]}
            }).sort("position", 1))
            queue_count = len(queue)

            # –ü–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏
            if queue:
                first_user = queue[0]
                name = first_user.get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                stat = first_user.get("status", "waiting")
                if stat == "waiting":
                    status_text = "–æ–∂–∏–¥–∞–µ—Ç"
                elif stat == "confirmed_day":
                    status_text = "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞ –¥–µ–Ω—å"
                elif stat == "confirmed_hour":
                    status_text = "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞ —á–∞—Å"
                else:
                    status_text = stat
                first_line = f"ü•á –ü–µ—Ä–≤—ã–π: {name} ({status_text})"
            else:
                first_line = "ü•á –ü–µ—Ä–≤—ã–π: ‚Äî"

            # –¢–µ–∫—Å—Ç —Å–ª–æ—Ç–∞
            text = (
                f"üïê *{time_slot}*\n"
                f"üë• –û—á–µ—Ä–µ–¥—å: {queue_count} —á–µ–ª–æ–≤–µ–∫(–∞)\n"
                f"{first_line}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: *{status}*"
            )

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            markup = types.InlineKeyboardMarkup(row_width=3)
            markup.add(
                types.InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏", callback_data=f"admin_slot_details_{slot_id}"),
                types.InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"admin_edit_slot_{slot_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_slot_{slot_id}")
            )

            self.bot.send_message(
                chat_id=message.chat.id,
                text=text,
                reply_markup=markup,
                parse_mode='Markdown'
            )

    def edit_slot_time(self, slot_id, new_time):
        """–ò–∑–º–µ–Ω—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–æ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ—Ç–∞
            slot = consultation_slots_collection.find_one({"slot_id": slot_id})
            if not slot:
                logger.warning(f"–°–ª–æ—Ç {slot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º
            date_str = slot["date"]
            new_slot_id = f"{date_str}_{new_time}"
            new_time_slot = f"{new_time}-{int(new_time.split(':')[0]) + 1:02d}:00"

            slot_datetime = datetime.strptime(f"{date_str} {new_time}", "%Y-%m-%d %H:%M")
            if slot_datetime <= datetime.now():
                logger.warning(f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è {new_time} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
                return

            print(f"Current slot status: {slot['status']}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç
            consultation_slots_collection.update_one(
                {"slot_id": slot_id},
                {
                    "$set": {
                        "slot_id": new_slot_id,
                        "time_slot": new_time_slot
                    }
                }
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
            affected_users = list(consultation_queue_collection.find({"slot_id": slot_id}))
            for user in affected_users:
                consultation_queue_collection.update_one(
                    {"_id": user["_id"]},
                    {"$set": {"slot_id": new_slot_id}}
                )

            # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for user in affected_users:
                user_id = user["user_id"]
                position = user["position"]
                user_name = user.get("user_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                old_time = slot["time_slot"]
                formatted_date = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")

                text = (
                    f"‚ö†Ô∏è *–ò–ó–ú–ï–ù–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò*\n\n"
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
                    f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                    f"üïê –ë—ã–ª–æ: {old_time}\n"
                    f"üïê –°—Ç–∞–ª–æ: {new_time_slot}\n\n"
                    f"üìç –í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: *{position}*\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç."
                )

                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton(
                        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è",
                        callback_data=f"confirm_time_change_{user['_id']}"
                    ),
                    types.InlineKeyboardButton(
                        "‚ùå –û—Ç–º–µ–Ω—è—é –∑–∞–ø–∏—Å—å",
                        callback_data=f"cancel_due_time_change_{user['_id']}"
                    )
                )

                try:
                    self.bot.send_message(
                        chat_id=user_id,
                        text=text,
                        reply_markup=markup,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user_id}: {e}")

            logger.info(f"‚úÖ –°–ª–æ—Ç {slot_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –Ω–∞ {new_time}, —É–≤–µ–¥–æ–º–ª–µ–Ω–æ {len(affected_users)} —á–µ–ª–æ–≤–µ–∫.")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç–∞: {e}")

    def show_slot_details(self, call, slot_id):
        slot = consultation_slots_collection.find_one({"slot_id": slot_id})
        if not slot:
            self.bot.answer_callback_query(call.id, "‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        queue = list(consultation_queue_collection.find(
            {"slot_id": slot_id, "status": {"$nin": ["cancelled", "completed"]}}
        ).sort("position", 1))

        date_str = slot.get("date", "‚Äî")
        time_slot = slot.get("time_slot", "‚Äî")
        formatted_date = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")

        header = f"üìã *–î–ï–¢–ê–õ–ò –°–õ–û–¢–ê:* {formatted_date} {time_slot}\n\n"
        header += f"üë• *–û–ß–ï–†–ï–î–¨* ({len(queue)} —á–µ–ª–æ–≤–µ–∫):\n\n"

        medal_icons = ["ü•á", "ü•à", "ü•â"]
        text_lines = []
        markup = types.InlineKeyboardMarkup(row_width=2)

        for idx, user in enumerate(queue):
            user_name = user.get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            user_id = user.get("user_id", "‚Äî")
            status = user.get("status", "waiting")
            booking_id = user.get("_id")
            registered_at = user.get("registered_at")

            status_map = {
                "waiting": "–æ–∂–∏–¥–∞–µ—Ç",
                "confirmed_day": "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞ –¥–µ–Ω—å",
                "confirmed_hour": "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞ —á–∞—Å"
            }
            status_text = status_map.get(status, status)

            reg_dt = registered_at.strftime("%d.%m.%Y %H:%M") if registered_at else "‚Äî"
            icon = medal_icons[idx] if idx < 3 else f"{idx + 1}."

            text_lines.append(
                f"{icon} *{idx + 1}. {user_name}*\n"
                f"   üì± ID: `{user_id}`\n"
                f"   üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"   üìÖ –ó–∞–ø–∏—Å–∞–ª—Å—è: {reg_dt}"
            )

            markup.add(
                types.InlineKeyboardButton("‚ùå –£–±—Ä–∞—Ç—å", callback_data=f"admin_remove_user_{booking_id}"),
                types.InlineKeyboardButton("üìû –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"admin_message_user_{user_id}")
            )

        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ª–æ—Ç–∞–º", callback_data="admin_consultations"))

        full_text = header + "\n\n".join(text_lines)
        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=full_text,
            reply_markup=markup,
            parse_mode="Markdown"
        )

    def show_week_slots(self, call):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–ª–æ—Ç—ã –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        if call.from_user.id not in self.ADMIN_IDS:
            self.bot.answer_callback_query(call.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        today = datetime.now()
        end_date = today + timedelta(days=6)
        
        today_str = today.strftime("%Y-%m-%d")
        end_date_str = end_date.strftime("%Y-%m-%d")

        # 2. –ò—â–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        # –î–û–õ–ñ–ù–û –ë–´–¢–¨:
        slots = list(consultation_slots_collection.find({
            "date": {"$gte": today_str, "$lte": end_date_str},
            "status": {"$ne": "cancelled"}
        }).sort([("date", 1), ("time_slot", 1)]))

        if not slots:
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìÖ –ù–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ 7 –¥–Ω–µ–π –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."
            )
            return

        # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π
        for slot in slots:
            slot_id = slot["slot_id"]
            time_slot = slot["time_slot"]
            status = slot["status"]
            date_str = slot["date"]
            
            # –ú–∞—Ä–∫–µ—Ä –¥–∞—Ç—ã
            formatted_date = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")
            date_marker = f"üîπ –°–ï–ì–û–î–ù–Ø ({formatted_date})" if date_str == today_str else f"üî∏ {formatted_date}"
            
            # –û—á–µ—Ä–µ–¥—å
            queue = list(consultation_queue_collection.find({
                "slot_id": slot_id,
                "status": {"$nin": ["cancelled", "completed"]}
            }).sort("position", 1))
            queue_count = len(queue)
            
            # –ü–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏
            if queue:
                first_user = queue[0]
                name = first_user.get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                stat = first_user.get("status", "waiting")
                if stat == "waiting":
                    status_text = "–æ–∂–∏–¥–∞–µ—Ç"
                elif stat == "confirmed_day":
                    status_text = "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞ –¥–µ–Ω—å"
                elif stat == "confirmed_hour":
                    status_text = "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞ —á–∞—Å"
                else:
                    status_text = stat
                first_line = f"ü•á –ü–µ—Ä–≤—ã–π: {name} ({status_text})"
            else:
                first_line = "ü•á –ü–µ—Ä–≤—ã–π: ‚Äî"
            
            # –¢–µ–∫—Å—Ç —Å–ª–æ—Ç–∞
            text = (
                f"{date_marker}\n"
                f"üïê *{time_slot}*\n"
                f"üë• –û—á–µ—Ä–µ–¥—å: {queue_count} —á–µ–ª–æ–≤–µ–∫(–∞)\n"
                f"{first_line}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: *{status}*"
            )
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            markup = types.InlineKeyboardMarkup(row_width=3)
            markup.add(
                types.InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏", callback_data=f"admin_slot_details_{slot_id}"),
                types.InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"admin_edit_slot_{slot_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_slot_{slot_id}")
            )
            
            self.bot.send_message(
                chat_id=call.message.chat.id,
                text=text,
                reply_markup=markup,
                parse_mode='Markdown'
            )

    def show_all_slots(self, call):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å–ª–æ—Ç–∞–º."""
        # print("show_all_slots called")
        if call.from_user.id not in self.ADMIN_IDS:
            self.bot.answer_callback_query(call.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        
        # –î–û–õ–ñ–ù–û –ë–´–¢–¨:
        # slots = list(consultation_slots_collection.find({
        #     # "status": {"$ne": "cancelled"}  # ‚Üê –¢–û–õ–¨–ö–û —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
        # }).sort([("date", 1), ("time_slot", 1)]))
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–°–ï —Å–ª–æ—Ç—ã (–≤–∫–ª—é—á–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ):
        slots = list(consultation_slots_collection.find({}).sort([("date", 1), ("time_slot", 1)]))
        if not slots:
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."
            )
            return

        text_lines = ["üìÖ *–í–°–ï –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò*"]
        total_registrations = 0

        for slot in slots:
            slot_id = slot["slot_id"]
            date_str = slot["date"]
            time_slot = slot["time_slot"]

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
            queue = list(consultation_queue_collection.find({
                "slot_id": slot_id,
                "status": {"$nin": ["cancelled", "completed"]}
            }))
            
            queue_count = len(queue)
            total_registrations += queue_count
            
            # –°—á–∏—Ç–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö
            confirmed_count = 0
            for user in queue:
                if user.get("status") in ["confirmed_day", "confirmed_hour"]:
                    confirmed_count += 1
            
            formatted_date = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")
            text_lines.append(f"üóìÔ∏è *{formatted_date}* üïê `{time_slot}` ‚Üí {queue_count} —á–µ–ª. ({confirmed_count} –ø–æ–¥—Ç–≤.)")

        text_lines.append(f"\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: *{total_registrations}* —á–µ–ª–æ–≤–µ–∫.")

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_consultations_menu"))

        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="\n".join(text_lines),
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
   # —è –æ—Ç–∫—Ä—ã–≤–∞—é –¥–µ—Ç–∞–ª–∏ —Å–ª–æ—Ç–∞ –∏ –≤–∏–∂—É —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏: "–î–µ—Ç–∞–ª–∏", "–ò–∑–º–µ–Ω–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å". 
   # —Ç–µ–ø–µ—Ä—å –Ω–∞–¥–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å", —á—Ç–æ–±—ã –∞–¥–º–∏–Ω –º–æ–≥ –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    def cancel_slot(self, call, slot_id):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Å–ª–æ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        if call.from_user.id not in self.ADMIN_IDS:
            self.bot.answer_callback_query(call.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        slot = consultation_slots_collection.find_one({"slot_id": slot_id})
        if not slot:
            self.bot.answer_callback_query(call.id, "‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏ –ü–ï–†–ï–î —É–¥–∞–ª–µ–Ω–∏–µ–º
        queue = list(consultation_queue_collection.find({"slot_id": slot_id}))
        
        # –£–î–ê–õ–Ø–ï–ú —Å–ª–æ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞)
        result = consultation_slots_collection.delete_one({"slot_id": slot_id})
        
        # –£–î–ê–õ–Ø–ï–ú –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
        queue_result = consultation_queue_collection.delete_many({"slot_id": slot_id})

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for user in queue:
            user_id = user["user_id"]
            user_name = user.get("user_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            text = (
                f"‚ùå *–°–ª–æ—Ç –æ—Ç–º–µ–Ω—ë–Ω*\n\n"
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ª–æ—Ç –Ω–∞ {slot['date']} –≤ {slot['time_slot']} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç."
            )
            try:
                self.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {user_id}: {e}")

        self.bot.answer_callback_query(call.id, "‚úÖ –°–ª–æ—Ç —É–¥–∞–ª–µ–Ω –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")
        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚úÖ –°–ª–æ—Ç —É–¥–∞–ª–µ–Ω –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.\nüí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ.",
            reply_markup=None
        )
    
    def manual_send_reminders(self, call):
        """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∫–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω–∞)"""
        if call.from_user.id not in self.ADMIN_IDS:
            self.bot.answer_callback_query(call.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            status_msg = self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üì§ **–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**\n\n‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...",
                parse_mode='Markdown'
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            scheduler = ConsultationNotificationScheduler(self.bot)
            total_sent = scheduler.check_and_send_notifications()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if total_sent > 0:
                result_text = (
                    f"üì§ **–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
                    f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: **{total_sent}**\n"
                    f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
                )
            else:
                result_text = (
                    f"üì§ **–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
                    f"‚ÑπÔ∏è –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.\n"
                    f"üìä –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –∏–ª–∏ —Å–ª–æ—Ç—ã –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã."
                )
            
            from telebot import types
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=status_msg.message_id,
                text=result_text,
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_consultations_menu")
                ),
                parse_mode='Markdown'
            )
            
            self.bot.answer_callback_query(call.id, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

    def find_empty_slot(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏"""
        from datetime import datetime, timedelta
        import pytz
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–ê–ª–º–∞—Ç—ã)
        almaty_tz = pytz.timezone('Asia/Almaty')
        now = datetime.now(almaty_tz)
        today_str = now.strftime("%Y-%m-%d")
        
        # –ó–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
        slots = consultation_slots_collection.find({
            "status": "open",
            "date": {"$gte": today_str}
        }).sort([("date", 1), ("time_slot", 1)])
        
        for slot in slots:
            try:
                slot_date = slot["date"]
                time_slot = slot["time_slot"]
                slot_id = f"{slot_date}_{time_slot.split('-')[0]}"
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
                slot_datetime_str = f"{slot_date} {time_slot.split('-')[0]}"
                slot_datetime = datetime.strptime(slot_datetime_str, "%Y-%m-%d %H:%M")
                slot_datetime = almaty_tz.localize(slot_datetime)
                
                if slot_datetime <= now:
                    continue  # –°–ª–æ—Ç —É–∂–µ –ø—Ä–æ—à–µ–ª
                
                # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                active_bookings = consultation_queue_collection.count_documents({
                    "slot_id": slot_id,
                    "status": {"$nin": ["cancelled", "completed"]}
                })
                
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π 0 - –≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ
                if active_bookings == 0:
                    slot_date_obj = datetime.strptime(slot_date, "%Y-%m-%d")
                    formatted_date = slot_date_obj.strftime("%d.%m.%Y")
                    
                    return {
                        "slot_id": slot_id,
                        "date": slot_date,
                        "time_slot": time_slot,
                        "formatted_date": formatted_date
                    }
                    
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ—Ç–∞ {slot}: {e}")
                continue
        
        # –ï—Å–ª–∏ –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç - –≤–µ—Ä–Ω—É—Ç—å None
        return None

    def handle_rebooking_cancel(self, call, booking_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏"""
        from bson import ObjectId
        from datetime import datetime
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            booking = consultation_queue_collection.find_one({"_id": ObjectId(booking_id)})
            if not booking:
                self.bot.answer_callback_query(call.id, "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            user_id = booking["user_id"]
            slot_id = booking["slot_id"]
            position = booking["position"]
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
            consultation_queue_collection.update_one(
                {"_id": ObjectId(booking_id)},
                {"$set": {
                    "status": "cancelled",
                    "cancelled_at": datetime.utcnow(),
                    "cancelled_reason": "user_rebooking_cancel"
                }}
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ (—Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ -1)
            consultation_queue_collection.update_many(
                {
                    "slot_id": slot_id,
                    "position": {"$gt": position},
                    "status": {"$nin": ["cancelled", "completed"]}
                },
                {"$inc": {"position": -1}}
            )
            
            # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            if user_id in self.user_states:
                del self.user_states[user_id]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            date_str, time_str = slot_id.split("_")
            slot_date = datetime.strptime(date_str, "%Y-%m-%d")
            formatted_date = slot_date.strftime("%d.%m.%Y")
            end_hour = int(time_str.split(":")[0]) + 1
            time_display = f"{time_str}-{end_hour:02d}:00"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
            confirmation_text = (
                f"‚úÖ **–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
                f"üìÖ –û—Ç–º–µ–Ω–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:\n"
                f"üóì –î–∞—Ç–∞: {formatted_date}\n"
                f"üïê –í—Ä–µ–º—è: {time_display}\n\n"
                f"üí° **–ß—Ç–æ –¥–∞–ª—å—à–µ?**\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telebot import types
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ", callback_data="free_consultation"),
                types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
            )
            
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=confirmation_text,
                reply_markup=markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ handle_rebooking_cancel: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")

    #–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ handle_admin_callback
    #–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ—Å–ª–∏ call.data.startswith("admin_message_user_")
    #–ò–∑–≤–ª–µ–∫–∞—Ç—å user_id –∏–∑ callback_data
    #–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    def handle_admin_callback(self, call):
        if call.data.startswith("admin_message_user_"):
            user_id = int(call.data.split("_")[-1])
            admin_id = call.from_user.id

            if admin_id not in self.ADMIN_IDS:
                self.bot.answer_callback_query(call.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
                return
            
            self.user_states[admin_id] = f"admin_messaging_{user_id}"
            # print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self.user_states.get(admin_id)}")
            # print(f"[DEBUG] id(user_states): {id(self.user_states)}")
            # ‚ùå –£–ë–†–ê–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£:
            # from main import user_states
            
            # ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –ü–†–Ø–ú–û–ô –î–û–°–¢–£–ü –ö –ì–õ–û–ë–ê–õ–¨–ù–û–ô –ü–ï–†–ï–ú–ï–ù–ù–û–ô:
            import main
            main.user_states[admin_id] = f"admin_messaging_{user_id}"
            
            # üîß –û–¢–õ–ê–î–ö–ê
            # print(f"[DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞ {admin_id}: admin_messaging_{user_id}")
            # print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ä–∞–∑—É: {main.user_states.get(admin_id)}")
            
            self.bot.send_message(
                chat_id=call.message.chat.id,
                text=f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID `{user_id}`:",
                reply_markup=types.ReplyKeyboardRemove(),
                parse_mode='Markdown'
            )      
    


class ConsultationNotificationScheduler:
    def __init__(self, bot):
        self.bot = bot
        self.running = False
        self.thread = None

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.running:
            self.running = True
            self.thread = threading.Thread(target=self._scheduler_loop, daemon=True)
            self.thread.start()
            print("[INFO] üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∑–∞–ø—É—â–µ–Ω")

    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.running = False
        if self.thread:
            self.thread.join()
        print("[INFO] üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _scheduler_loop(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            try:
                now = datetime.now()
                
                # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ –î–ï–ù–¨ - —Ç–æ–ª—å–∫–æ –≤ 10:00 –∏ 18:00
                if now.hour in [10, 18] and now.minute < 5:
                    print(f"[INFO] üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å: {now.strftime('%H:%M')}")
                    self.send_day_before_notifications(now)
                
                # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ –ß–ê–° - —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (12:00-18:00)
                if 12 <= now.hour <= 18 and now.minute < 5:
                    print(f"[INFO] ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —á–∞—Å: {now.strftime('%H:%M')}")
                    self.send_hour_before_notifications(now)

                # 3Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (16-18 –∫–∞–∂–¥—ã–π —á–∞—Å)
                if now.hour in [16, 17, 18] and now.minute < 5:
                    print(f"[INFO] üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {now.strftime('%H:%M')}")
                    self.cleanup_completed_consultations()
                
                # üåô –ù–û–ß–ù–û–ô –†–ï–ñ–ò–ú: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–µ
                if 22 <= now.hour or now.hour <= 6:
                    sleep_time = 3600  # 1 —á–∞—Å –Ω–æ—á—å—é
                else:
                    sleep_time = 300   # 5 –º–∏–Ω—É—Ç –¥–Ω–µ–º
                
                time.sleep(sleep_time)
                
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(300)

    def check_and_send_notifications(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)"""
        now = datetime.now()
        print(f"[INFO] üîß –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {now.strftime('%d.%m.%Y %H:%M')}")
        
        day_count = self.send_day_before_notifications(now)
        hour_count = self.send_hour_before_notifications(now)
        
        total = day_count + hour_count
        print(f"[INFO] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {total}")
        return total

    def send_day_before_notifications(self, now):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å"""
        from db import consultation_slots_collection, consultation_queue_collection
        
        tomorrow_start = now + timedelta(hours=20)
        tomorrow_date = tomorrow_start.strftime("%Y-%m-%d")
        
        bookings_to_notify = list(consultation_queue_collection.find({
            "status": {"$nin": ["cancelled", "completed"]},
            "notifications_sent.day_before": False,
            "slot_id": {"$regex": f"^{tomorrow_date}"}
        }))

        sent_count = 0
        for booking in bookings_to_notify:
            try:
                self._send_day_before_notification(booking)
                consultation_queue_collection.update_one(
                    {"_id": booking["_id"]},
                    {"$set": {"notifications_sent.day_before": True}}
                )
                sent_count += 1
                
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {booking['user_id']}: {e}")

        return sent_count

    def cleanup_completed_consultations(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—à–ª–æ"""
        from db import consultation_slots_collection, consultation_queue_collection
        from bson import ObjectId
        now = datetime.now()
        threshold = now - timedelta(hours=1)

        slots = list(consultation_slots_collection.find({}))
        for slot in slots:
            slot_id = slot.get("slot_id")
            if not slot_id:
                continue
            date_str, time_str = slot_id.split("_")
            slot_start = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
            slot_end = slot_start + timedelta(hours=1)

            if slot_end > threshold:
                continue  # –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è

            queue = list(consultation_queue_collection.find({
                "slot_id": slot_id,
                "status": {"$nin": ["cancelled", "completed", "missed"]}
            }).sort("position", 1))

            if not queue:
                continue

            for idx, booking in enumerate(queue):
                booking_id = booking["_id"]
                if idx == 0:
                    if booking["status"] == "confirmed_hour":
                        new_status = "completed"
                    elif booking["status"] == "waiting":
                        new_status = "missed"
                    else:
                        new_status = booking["status"]

                    consultation_queue_collection.update_one(
                        {"_id": ObjectId(booking_id)},
                        {"$set": {"status": new_status}}
                    )
                else:
                    consultation_queue_collection.update_one(
                        {"_id": ObjectId(booking_id)},
                        {"$set": {
                            "status": "cancelled",
                            "cancelled_at": datetime.utcnow(),
                            "cancelled_reason": "slot_completed"
                        }}
                    )
                    try:
                        self._send_reschedule_notification(booking)
                    except Exception as e:
                        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {booking.get('user_id')}: {e}")

    def _send_reschedule_notification(self, booking):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ª–æ—Ç–∞"""
        from telebot import types

        user_id = booking["user_id"]
        user_name = booking.get("user_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        slot_id = booking["slot_id"]
        position = booking["position"]

        date_str, time_str = slot_id.split("_")
        slot_date = datetime.strptime(date_str, "%Y-%m-%d")
        formatted_date = slot_date.strftime("%d.%m.%Y")
        end_hour = int(time_str.split(":")[0]) + 1
        time_display = f"{time_str}-{end_hour:02d}:00"

        text = (
            "üïê –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
            f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è {formatted_date} {time_display} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å. "
            f"–í—ã –±—ã–ª–∏ {position}-–º –≤ –æ—á–µ—Ä–µ–¥–∏.\n\n"
            "üéØ –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
        )

        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data=f"reschedule_auto_{booking['_id']}")
        )
        markup.add(
            types.InlineKeyboardButton("üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", callback_data=f"reschedule_manual_{booking['_id']}")
        )
        markup.add(
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"reschedule_cancel_{booking['_id']}")
        )

        self.bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=markup,
            parse_mode='Markdown'
        )

    def send_hour_before_notifications(self, now):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ —á–∞—Å"""
        from db import consultation_slots_collection, consultation_queue_collection
        
        current_date = now.strftime("%Y-%m-%d")
        current_hour = now.hour
        next_hours = [(current_hour + i) % 24 for i in range(3)]
        
        sent_count = 0
        
        for hour in next_hours:
            slot_pattern = f"{current_date}_{hour:02d}:00"
            
            bookings_to_notify = list(consultation_queue_collection.find({
                "status": {"$nin": ["cancelled", "completed"]},
                "notifications_sent.hour_before": False,
                "slot_id": slot_pattern
            }))

            for booking in bookings_to_notify:
                try:
                    slot_id = booking["slot_id"]
                    date_str, time_str = slot_id.split("_")
                    consultation_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
                    
                    time_diff = consultation_time - now
                    
                    if timedelta(minutes=50) <= time_diff <= timedelta(minutes=70):
                        self._send_hour_before_notification(booking)
                        consultation_queue_collection.update_one(
                            {"_id": booking["_id"]},
                            {"$set": {"notifications_sent.hour_before": True}}
                        )
                        sent_count += 1
                        
                except Exception as e:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {booking['user_id']}: {e}")

        return sent_count

    def _send_day_before_notification(self, booking):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å"""
        from telebot import types
        
        user_id = booking["user_id"]
        user_name = booking.get("user_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        slot_id = booking["slot_id"]
        position = booking["position"]
        
        date_str, time_str = slot_id.split("_")
        slot_date = datetime.strptime(date_str, "%Y-%m-%d")
        formatted_date = slot_date.strftime("%d.%m.%Y")
        end_hour = int(time_str.split(':')[0]) + 1
        time_display = f"{time_str}-{end_hour:02d}:00"
        
        text = (
            f"üìÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏**\n\n"
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
            f"‚è∞ –ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_date} (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)\n"
            f"üïê –í—Ä–µ–º—è: {time_display}\n"
            f"üìç –í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {position}\n\n"
            f"üîî **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ!**"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É—á–∞—Å—Ç–∏–µ", 
                                     callback_data=f"confirm_day_{booking['_id']}"),
            types.InlineKeyboardButton("‚ùå –ù–µ —Å–º–æ–≥—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", 
                                     callback_data=f"cancel_day_{booking['_id']}")
        )
        
        self.bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=markup,
            parse_mode='Markdown'
        )

    def _send_hour_before_notification(self, booking):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —á–∞—Å"""
        from telebot import types
        
        user_id = booking["user_id"]
        user_name = booking.get("user_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        slot_id = booking["slot_id"]
        position = booking["position"]
        
        date_str, time_str = slot_id.split("_")
        slot_date = datetime.strptime(date_str, "%Y-%m-%d")
        formatted_date = slot_date.strftime("%d.%m.%Y")
        end_hour = int(time_str.split(':')[0]) + 1
        time_display = f"{time_str}-{end_hour:02d}:00"
        
        text = (
            f"üîî **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ —á–∞—Å!**\n\n"
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
            f"‚è∞ –í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å:\n"
            f"üìÖ –°–µ–≥–æ–¥–Ω—è, {formatted_date}\n"
            f"üïê –í—Ä–µ–º—è: {time_display}\n"
            f"üìç –í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {position}\n\n"
            f"üöÄ **–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!**"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", 
                                     callback_data=f"confirm_hour_{booking['_id']}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ", 
                                     callback_data=f"cancel_hour_{booking['_id']}")
        )
        
        self.bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=markup,
            parse_mode='Markdown'
        )