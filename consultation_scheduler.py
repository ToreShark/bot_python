# consultation_scheduler.py
"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è—Ö
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å —á–µ—Ä–µ–∑ cron
"""

import telebot
from pymongo import MongoClient
from datetime import datetime, timedelta
from bson import ObjectId
import os
from dotenv import load_dotenv
import logging

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('consultation_scheduler.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∏ –±–æ—Ç—É
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")

bot = telebot.TeleBot(BOT_TOKEN)
client = MongoClient(MONGO_URI)
db = client['telegram_bot']

consultation_slots_collection = db['consultation_slots']
consultation_queue_collection = db['consultation_queue']

class ConsultationScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    
    def __init__(self):
        self.bot = bot
        logger.info("ü§ñ ConsultationScheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def send_day_before_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        now = datetime.now()
        target_time = now + timedelta(hours=24)
        target_date = target_time.strftime("%Y-%m-%d")
        target_hour = f"{target_time.hour:02d}:00"

        logger.info(f"üîî –ü–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤ –Ω–∞ {target_date} –≤ {target_hour} (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å)")

        # –ò—â–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É –∏ —á–∞—Å
        slots = consultation_slots_collection.find({
            "date": target_date,
            "time_slot": {"$regex": f"^{target_hour}"},  # –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω—É–∂–Ω–æ–≥–æ —á–∞—Å–∞
            "status": "open"
        })

        for slot in slots:
            slot_id = slot["slot_id"]

            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º waiting
            first_user = consultation_queue_collection.find_one({
                "slot_id": slot_id,
                "position": 1,
                "status": "waiting",
                "notifications_sent.day_before": False
            })

            if not first_user:
                continue  # –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –∏–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

            user_id = first_user["user_id"]
            date_str = slot["date"]
            time_str = slot["time_slot"]

            message = (
                f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n"
                f"üìÖ –ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:\n"
                f"üïê {date_str} –≤ {time_str}\n\n"
                f"‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Å—Ç–æ."
            )

            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data=f"confirm_day_{slot_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω—è—é", callback_data=f"cancel_booking_{first_user['_id']}")
            )

            try:
                self.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    reply_markup=markup,
                    parse_mode='Markdown'
                )

                consultation_queue_collection.update_one(
                    {"_id": first_user["_id"]},
                    {"$set": {"notifications_sent.day_before": True}}
                )

                logger.info(f"üì© –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è {slot_id}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å: {e}")

    def send_hour_before_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 —á–∞—Å –∏–ª–∏ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å"""
        now = datetime.now()
        target_time = now + timedelta(hours=1)
        target_date = target_time.strftime("%Y-%m-%d")
        target_hour = f"{target_time.hour:02d}:00"

        logger.info(f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–æ–≤ –Ω–∞ {target_date} –≤ {target_hour} (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ —á–∞—Å)")

        slots = consultation_slots_collection.find({
            "date": target_date,
            "time_slot": {"$regex": f"^{target_hour}"},
            "status": "open"
        })

        for slot in slots:
            slot_id = slot["slot_id"]

            while True:
                first_user = consultation_queue_collection.find_one({
                    "slot_id": slot_id,
                    "position": 1,
                    "status": "waiting"
                })

                if not first_user:
                    logger.info(f"üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ {slot_id}")
                    break

                user_id = first_user["user_id"]

                # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏?
                if first_user.get("notifications_sent", {}).get("hour_before", False):
                    logger.info(f"‚è≥ –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ —á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    break

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –∑–∞ –¥–µ–Ω—å?
                if first_user.get("confirmed_day_at"):
                    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    try:
                        date_str = slot["date"]
                        time_str = slot["time_slot"]
                        message = (
                            f"üì£ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n"
                            f"üìÖ –°–µ–≥–æ–¥–Ω—è –≤ {time_str} —É –≤–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è.\n"
                            f"‚è±Ô∏è –û—Å—Ç–∞–ª—Å—è 1 —á–∞—Å ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–∞ —Å–≤—è–∑–∏."
                        )
                        markup = types.InlineKeyboardMarkup()
                        markup.add(
                            types.InlineKeyboardButton("‚úÖ –Ø –≥–æ—Ç–æ–≤(–∞)", callback_data=f"confirm_hour_{slot_id}"),
                            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_booking_{first_user['_id']}")
                        )

                        self.bot.send_message(
                            chat_id=user_id,
                            text=message,
                            reply_markup=markup,
                            parse_mode='Markdown'
                        )

                        consultation_queue_collection.update_one(
                            {"_id": first_user["_id"]},
                            {"$set": {"notifications_sent.hour_before": True}}
                        )

                        logger.info(f"üì© –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ {slot_id}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞ —á–∞—Å: {e}")
                    break  # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏–π –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è
                else:
                    # –£–¥–∞–ª—è–µ–º –∏ –¥–≤–∏–≥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
                    logger.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞ –¥–µ–Ω—å ‚Äî —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏")

                    consultation_queue_collection.update_one(
                        {"_id": first_user["_id"]},
                        {"$set": {
                            "status": "cancelled",
                            "cancelled_at": datetime.utcnow()
                        }}
                    )

                    # –°–¥–≤–∏–≥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                    consultation_queue_collection.update_many(
                        {
                            "slot_id": slot_id,
                            "position": {"$gt": first_user["position"]},
                            "status": {"$nin": ["cancelled", "completed"]}
                        },
                        {"$inc": {"position": -1}}
                    )

                    logger.info(f"‚Ü©Ô∏è –û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {slot_id}. –ò—â–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ...")
                    # –ü–æ–≤—Ç–æ—Ä–∏–º —Ü–∏–∫–ª —Å –Ω–æ–≤—ã–º –ø–µ—Ä–≤—ã–º

    def promote_queue(self, slot_id: str, reason: str):
        """–ü—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞/–Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        first_user = consultation_queue_collection.find_one({
            "slot_id": slot_id,
            "position": 1,
            "status": "waiting"
        })

        if not first_user:
            logger.info(f"üë§ –ù–µ—Ç –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ —Å–ª–æ—Ç–µ {slot_id}")
            return

        # –û—Ç–º–µ–Ω—è–µ–º –ø–µ—Ä–≤–æ–≥–æ
        consultation_queue_collection.update_one(
            {"_id": first_user["_id"]},
            {"$set": {
                "status": "cancelled",
                "cancelled_at": datetime.utcnow(),
                "cancelled_reason": reason
            }}
        )

        logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_user['user_id']} —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ({reason})")

        # –°–¥–≤–∏–≥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        consultation_queue_collection.update_many(
            {
                "slot_id": slot_id,
                "position": {"$gt": first_user["position"]},
                "status": {"$nin": ["cancelled", "completed"]}
            },
            {"$inc": {"position": -1}}
        )

        # –ù–æ–≤—ã–π –ø–µ—Ä–≤—ã–π
        new_first = consultation_queue_collection.find_one({
            "slot_id": slot_id,
            "position": 1,
            "status": "waiting"
        })

        date_str, time_str = slot_id.split("_")
        slot_date = datetime.strptime(date_str, "%Y-%m-%d")
        formatted_date = slot_date.strftime("%d.%m.%Y")
        end_hour = int(time_str.split(":")[0]) + 1
        time_display = f"{time_str}-{end_hour:02d}:00"

        if new_first:
            user_id = new_first["user_id"]

            if reason == "no_day_confirmation":
                text = (
                    f"üì¢ *–û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ!*\n\n"
                    f"üìÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {formatted_date} –≤ {time_display}\n"
                    f"–í—ã —Å—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã–º –≤ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ!"
                )
                callback = f"confirm_day_{slot_id}"
                consultation_queue_collection.update_one(
                    {"_id": new_first["_id"]},
                    {"$set": {"notifications_sent.day_before": False}}
                )
            elif reason == "no_hour_confirmation":
                text = (
                    f"üö® *–°–†–û–ß–ù–û!*\n\n"
                    f"üìÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É–∂–µ —á–µ—Ä–µ–∑ —á–∞—Å: {formatted_date} –≤ {time_display}\n"
                    f"–í—ã –ø—Ä–æ–¥–≤–∏–Ω—É–ª–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å –∏ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–≤—ã–π!\n"
                    f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."
                )
                callback = f"confirm_hour_{slot_id}"
                consultation_queue_collection.update_one(
                    {"_id": new_first["_id"]},
                    {"$set": {"notifications_sent.hour_before": False}}
                )
            else:
                text = f"üìÖ –í—ã —Å—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã–º –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ {formatted_date} –≤ {time_display}!"
                callback = None

            markup = types.InlineKeyboardMarkup()
            if callback:
                markup.add(
                    types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data=callback),
                    types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_booking_{new_first['_id']}")
                )

            try:
                self.bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=markup if callback else None,
                    parse_mode='Markdown'
                )
                logger.info(f"üì® –ù–æ–≤—ã–π –ø–µ—Ä–≤—ã–π —É–≤–µ–¥–æ–º–ª—ë–Ω: {user_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏
        promoted = consultation_queue_collection.find({
            "slot_id": slot_id,
            "position": {"$gt": 1},
            "status": {"$nin": ["cancelled", "completed"]}
        })

        for user in promoted:
            try:
                self.bot.send_message(
                    chat_id=user["user_id"],
                    text=(
                        f"üìà –í—ã –ø—Ä–æ–¥–≤–∏–Ω—É–ª–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏!\n"
                        f"üìÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {formatted_date} –≤ {time_display}\n"
                        f"üìç –ù–æ–≤–æ–µ –º–µ—Å—Ç–æ: {user['position'] - 1}"
                    ),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {user['user_id']}: {e}")

    def check_expired_confirmations(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å"""
        now = datetime.now()

        # üîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å (–±–æ–ª—å—à–µ 3 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)
        three_hours_ago = now - timedelta(hours=3)
        expired_day = consultation_queue_collection.find({
            "status": "waiting",
            "confirmed_day_at": None,
            "notifications_sent.day_before": True,
            "registered_at": {"$lte": three_hours_ago}
        })

        for user in expired_day:
            slot_id = user["slot_id"]
            logger.info(f"‚è± –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å: {user['user_id']} ‚Üí {slot_id}")
            self.promote_queue(slot_id, reason="no_day_confirmation")

        # üîç 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∑–∞ —á–∞—Å (–±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)
        thirty_minutes_ago = now - timedelta(minutes=30)
        hour_limit = now + timedelta(minutes=30)  # –µ—Å–ª–∏ –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ <30 –º–∏–Ω

        slots = consultation_slots_collection.find({
            "status": "open"
        })

        for slot in slots:
            slot_id = slot["slot_id"]
            date_str, time_str = slot_id.split("_")
            slot_dt = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–æ —Å–ª–æ—Ç–∞ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç
            if slot_dt > hour_limit:
                continue

            user = consultation_queue_collection.find_one({
                "slot_id": slot_id,
                "position": 1,
                "status": "waiting",
                "confirmed_hour_at": None,
                "notifications_sent.hour_before": True,
                "registered_at": {"$lte": thirty_minutes_ago}
            })

            if user:
                logger.info(f"üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞ —á–∞—Å: {user['user_id']} ‚Üí {slot_id}")
                self.promote_queue(slot_id, reason="no_hour_confirmation")

    def run_scheduled_tasks(self):
        """–ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info(f"üïí –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        try:
            self.check_expired_confirmations()
            logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: check_expired_confirmations")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_expired_confirmations: {e}")

        try:
            self.send_day_before_reminders()
            logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: send_day_before_reminders")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_day_before_reminders: {e}")

        try:
            self.send_hour_before_reminders()
            logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: send_hour_before_reminders")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_hour_before_reminders: {e}")

        logger.info("üèÅ –ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n")
