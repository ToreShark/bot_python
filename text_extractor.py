# text_extractor.py
import io
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.pdfpage import PDFPage
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
DEBUG_MODE = os.getenv('DEBUG', 'False').lower() == 'true'

if DEBUG_MODE:
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
else:
    logging.basicConfig(level=logging.CRITICAL)
    logger = logging.getLogger(__name__)
    logger.disabled = True

def extract_text_from_pdf(filepath):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF –∏—Å–ø–æ–ª—å–∑—É—è pdfminer.six —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ LAParams
    –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ —Å—Ç—Ä–æ–∫
    """
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LAParams –¥–ª—è –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        laparams = LAParams(
            char_margin=2.0,        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ —Å–ª–æ–≤–∞
            line_margin=0.3,        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ –∞–±–∑–∞—Ü—ã
            word_margin=0.1,        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
            boxes_flow=0.5,         # –ü–æ—Ä—è–¥–æ–∫ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–æ–≤ (0.5 = —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            detect_vertical=False,  # –ù–µ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            all_texts=False         # –ù–µ –≤–∫–ª—é—á–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        )
        
        output_string = io.StringIO()
        rsrcmgr = PDFResourceManager()
        device = TextConverter(rsrcmgr, output_string, laparams=laparams)
        interpreter = PDFPageInterpreter(rsrcmgr, device)
        
        with open(filepath, 'rb') as file:
            page_count = 0
            for page in PDFPage.get_pages(file, check_extractable=True):
                interpreter.process_page(page)
                page_count += 1
                
                if DEBUG_MODE and page_count <= 3:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count}")
        
        text = output_string.getvalue()
        device.close()
        output_string.close()
        
        if DEBUG_MODE:
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {page_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
            logger.info(f"–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {text[:200]}...")
        
        return text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å pdfminer.six: {e}")
        
        # Fallback –Ω–∞ PyMuPDF
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ PyMuPDF...")
        return extract_text_fallback_pymupdf(filepath)

def extract_text_fallback_pymupdf(filepath):
    """
    Fallback –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è PyMuPDF –µ—Å–ª–∏ pdfminer.six –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    try:
        import fitz  # PyMuPDF
        
        doc = fitz.open(filepath)
        text = ""
        
        for page_num in range(len(doc)):
            page = doc.load_page(page_num)
            text += page.get_text()
            
            if DEBUG_MODE and page_num < 3:
                logger.info(f"Fallback: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}")
        
        doc.close()
        
        if DEBUG_MODE:
            logger.info(f"Fallback: –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏ –≤ fallback –º–µ—Ç–æ–¥–µ: {e}")
        return ""

def extract_text_robust(filepath):
    """
    –†–æ–±—É—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    
    # –ù–∞–±–æ—Ä —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π LAParams
    configs = [
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (–æ—Å–Ω–æ–≤–Ω–∞—è)
        LAParams(char_margin=2.0, line_margin=0.3, word_margin=0.1, boxes_flow=0.5),
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–ª–æ—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        LAParams(char_margin=1.5, line_margin=0.2, word_margin=0.05, boxes_flow=0.3),
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
        LAParams(char_margin=3.0, line_margin=0.5, word_margin=0.2, boxes_flow=0.7),
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        LAParams(char_margin=1.0, line_margin=0.1, word_margin=0.0, boxes_flow=0.1)
    ]
    
    for i, laparams in enumerate(configs):
        try:
            if DEBUG_MODE:
                logger.info(f"–ü—Ä–æ–±—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {i+1}/{len(configs)}")
            
            output_string = io.StringIO()
            rsrcmgr = PDFResourceManager()
            device = TextConverter(rsrcmgr, output_string, laparams=laparams)
            interpreter = PDFPageInterpreter(rsrcmgr, device)
            
            with open(filepath, 'rb') as file:
                for page in PDFPage.get_pages(file, check_extractable=True):
                    interpreter.process_page(page)
            
            text = output_string.getvalue()
            device.close()
            output_string.close()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            if len(text) > 1000 and "–∫—Ä–µ–¥–∏—Ç" in text.lower():
                if DEBUG_MODE:
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π {i+1}")
                return text
                
        except Exception as e:
            if DEBUG_MODE:
                logger.warning(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {i+1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
            continue
    
    # –ï—Å–ª–∏ –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    logger.warning("–í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ pdfminer.six –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
    return extract_text_fallback_pymupdf(filepath)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def extract_text_from_pdf_enhanced(filepath):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞
    """
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
    text = extract_text_from_pdf(filepath)
    
    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π, –ø—Ä–æ–±—É–µ–º —Ä–æ–±—É—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥
    if len(text) < 500 or not any(keyword in text.lower() for keyword in ["–∫—Ä–µ–¥–∏—Ç", "–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "–¥–æ–ª–≥", "–±–∞–Ω–∫"]):
        if DEBUG_MODE:
            logger.info("–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–∞–ª –ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–æ–±—É–µ–º —Ä–æ–±—É—Å—Ç–Ω—ã–π...")
        text = extract_text_robust(filepath)
    
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
def test_extraction_methods(filepath):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π
    """
    
    results = {}
    
    # –¢–µ—Å—Ç pdfminer.six
    try:
        text_pdfminer = extract_text_from_pdf(filepath)
        results['pdfminer'] = {
            'length': len(text_pdfminer),
            'has_keywords': any(kw in text_pdfminer.lower() for kw in ["–∫—Ä–µ–¥–∏—Ç", "–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "–¥–æ–ª–≥"]),
            'sample': text_pdfminer[:200]
        }
    except Exception as e:
        results['pdfminer'] = {'error': str(e)}
    
    # –¢–µ—Å—Ç PyMuPDF
    try:
        text_pymupdf = extract_text_fallback_pymupdf(filepath)
        results['pymupdf'] = {
            'length': len(text_pymupdf),
            'has_keywords': any(kw in text_pymupdf.lower() for kw in ["–∫—Ä–µ–¥–∏—Ç", "–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "–¥–æ–ª–≥"]),
            'sample': text_pymupdf[:200]
        }
    except Exception as e:
        results['pymupdf'] = {'error': str(e)}
    
    # –¢–µ—Å—Ç —Ä–æ–±—É—Å—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    try:
        text_robust = extract_text_robust(filepath)
        results['robust'] = {
            'length': len(text_robust),
            'has_keywords': any(kw in text_robust.lower() for kw in ["–∫—Ä–µ–¥–∏—Ç", "–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "–¥–æ–ª–≥"]),
            'sample': text_robust[:200]
        }
    except Exception as e:
        results['robust'] = {'error': str(e)}
    
    return results

if __name__ == "__main__":
    # –¢–µ—Å—Ç –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —Ñ–∞–π–ª–∞
    test_file = "temp/test.pdf"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    
    if os.path.exists(test_file):
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞...")
        results = test_extraction_methods(test_file)
        
        for method, result in results.items():
            print(f"\nüìä {method.upper()}:")
            if 'error' in result:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            else:
                print(f"   üìè –î–ª–∏–Ω–∞: {result['length']}")
                print(f"   üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {'‚úÖ' if result['has_keywords'] else '‚ùå'}")
                print(f"   üìÑ –û–±—Ä–∞–∑–µ—Ü: {result['sample']}...")
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")