from credit_parser import create_parser_chain

def test_full_integration():
    with open('debug_text_output_376068212_972e044a.txt', 'r', encoding='utf-8') as f:
        text = f.read()
    
    parser = create_parser_chain()
    result = parser.parse(text)
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    print(f"  –¢–∏–ø –æ—Ç—á–µ—Ç–∞: {result.get('report_type')}")
    print(f"  –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É: {result.get('bankruptcy_ready')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    contracts_with_data = 0
    for obl in result['obligations']:
        if (obl.get('contract_number', '–ù–ï –ù–ê–ô–î–ï–ù') != '–ù–ï –ù–ê–ô–î–ï–ù' and 
            obl.get('debt_origin_date', '–ù–ï –ù–ê–ô–î–ï–ù–ê') != '–ù–ï –ù–ê–ô–î–ï–ù–ê'):
            contracts_with_data += 1
    
    print(f"  –î–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {contracts_with_data}/{len(result['obligations'])}")
    
    if contracts_with_data == len(result['obligations']):
        print("  üéØ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
        return True
    else:
        print("  ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return False

if __name__ == "__main__":
    test_full_integration()