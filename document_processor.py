# document_processor.py

from pymongo import MongoClient
import os
from datetime import datetime
from text_extractor import extract_text_from_pdf
from ocr import ocr_file, detect_document_type
from credit_parser import extract_credit_data_with_total, format_summary
from dotenv import load_dotenv

load_dotenv()  # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
env = os.getenv("ENV", "prod").lower()
DEBUG_MODE = env == "dev"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
if DEBUG_MODE:
    client = MongoClient("mongodb://localhost:27017")
    print(f"[DEBUG] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π MongoDB (—Ä–µ–∂–∏–º {env})")
else:
    client = MongoClient(os.getenv("MONGO_URI"))
    print(f"[DEBUG] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas (—Ä–µ–∂–∏–º {env})")
# db_name = "tg_bot_dev" if DEBUG_MODE else "telegram_bot"
db_name = "telegram_bot"
db = client[db_name]
docs_collection = db['documents']


def process_uploaded_file(filepath, user_id):
    # 1. –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
    text = extract_text_from_pdf(filepath)
    # print(f"[DEBUG] Direct PDF text length: {len(text)}")

     # üîç –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    with open("debug_text_output.txt", "w", encoding="utf-8") as f:
        f.write(text)

    # 2. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç ‚Äî OCR
    if not text.strip():
        # print("[INFO] PDF –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞. –ó–∞–ø—É—Å–∫–∞–µ–º OCR...")
        text = ocr_file(filepath)
        # print(f"[DEBUG] OCR text length: {len(text)}")

         # üîç –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ OCR —Ç–æ–∂–µ
        with open("debug_text_output_ocr.txt", "w", encoding="utf-8") as f:
            f.write(text)

    # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc_type = detect_document_type(text)

    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Mongo
    doc_record = {
        "user_id": user_id,
        "doc_type": doc_type,
        "text": text,
        "uploaded_at": datetime.utcnow().isoformat()
    }
    docs_collection.insert_one(doc_record)

     # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á—ë—Ç
    if doc_type == "credit_report":
        # print(f"[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)}")
        parsed = extract_credit_data_with_total(text)
        # print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {parsed}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        db['credit_reports'].insert_one({
            "user_id": user_id,
            "parsed": parsed,
            "uploaded_at": datetime.utcnow().isoformat()
        })

        summary = format_summary(parsed)
        return {"type": doc_type, "message": f"üìÑ –û—Ç—á—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n\n{summary}"}

    # 5. –û—Ç–≤–µ—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤)
    elif doc_type == "payment_receipt":
        return {"type": doc_type, "message": "üì∏ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."}
    else:
        return {"type": "unknown", "message": "‚ùì –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Ç–∏–ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω."}

    
    
