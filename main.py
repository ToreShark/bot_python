import telebot
import os
from dotenv import load_dotenv
from pymongo import MongoClient
from legal_engine import query
from datetime import datetime, timezone, timedelta
from telebot import types
import time

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = telebot.TeleBot(BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas
MONGO_URI = os.getenv("MONGO_URI")
client = MongoClient(MONGO_URI)

# –í—ã–±–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
db = client['telegram_bot']  # –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
users_collection = db['users']  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

# –ü—Ä–æ—Å—Ç–∞—è –∞–Ω—Ç–∏–≤–∞–Ω–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø
user_last_access = {}

@bot.message_handler(commands=['start'])
def main(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    existing_user = users_collection.find_one({"user_id": user_id})
    if not existing_user:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_collection.insert_one({
            "user_id": user_id,
            "first_name": first_name,
            "last_name": last_name,
            "access": False,
            "message_limit": 0,
            "messages": []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        })
    # –ö–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å 5 000 ‚Ç∏", callback_data="pay_5000"))
    markup.add(types.InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å 10 000 ‚Ç∏", callback_data="pay_10000"))
    markup.add(types.InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å 15 000 ‚Ç∏", callback_data="pay_15000"))

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(
        message.chat.id,
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø:",
        reply_markup=markup
        )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    # ADMIN_USER_ID = 376068212
    ADMIN_USER_IDS = [376068212, 827743984]
    if user_id not in ADMIN_USER_IDS:
        timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M UTC")
        admin_text = (
            "üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º:\n"
            f"üë§ –ò–º—è: {first_name} {last_name}\n"
            f"üÜî ID: {user_id}\n"
            f"üïí –í—Ä–µ–º—è: {timestamp}"
        )
        for admin_id in ADMIN_USER_IDS:
            try:
                bot.send_message(admin_id, admin_text)
            except Exception as e:
                print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_"))
def handle_payment_callback(call):
    amount_map = {
        "pay_5000": "5 000",
        "pay_10000": "10 000",
        "pay_15000": "15 000"
    }
    amount = amount_map.get(call.data, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞")

    if amount == "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞":
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")
        bot.answer_callback_query(call.id)
        return

    payment_text = (
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã {amount} ‚Ç∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É:\n"
        "https://pay.kaspi.kz/pay/izbl0ktq\n\n"
        "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )

    bot.send_message(call.message.chat.id, payment_text)
    bot.answer_callback_query(call.id)


@bot.message_handler(commands=['grant_access'])
def grant_access(message):
    ADMIN_USER_IDS = [376068212, 827743984]
    if message.from_user.id not in ADMIN_USER_IDS:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        _, user_id_str, limit_str = message.text.split()
        user_id = int(user_id_str)
        message_limit = int(limit_str)

        result = users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"access": True, "message_limit": message_limit}}
        )

        if result.matched_count == 0:
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(user_id, f"‚úÖ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø. –õ–∏–º–∏—Ç: {message_limit} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        bot.reply_to(message, f"‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        print(f"[ERROR grant_access] {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /grant_access [user_id] [–∫–æ–ª-–≤–æ_—Å–æ–æ–±—â–µ–Ω–∏–π]")


@bot.message_handler(func=lambda message: message.text.startswith('/law '))
def handle_legal_query(message):
    user_question = message.text[len('/law '):].strip()
    response = query(user_question)  # –≤—ã–∑—ã–≤–∞–µ–º LangChain –ø–∞–π–ø–ª–∞–π–Ω
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    user_id = message.from_user.id
    text = message.text
    now = datetime.now(timezone.utc)

    user = users_collection.find_one({"user_id": user_id})

    if not user:
        bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        return

    if not user.get("access", False):
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if user.get("message_limit", 0) <= 0:
        bot.send_message(message.chat.id, "üìµ –í–∞—à –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # 1. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É—Ç–∫–∏
    # ADMIN_USER_ID = 376068212  # ID –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    ADMIN_USER_IDS = [376068212, 827743984]
    if user_id not in ADMIN_USER_IDS:
        today_start = datetime(now.year, now.month, now.day, tzinfo=timezone.utc)
        message_count = users_collection.count_documents({
            "user_id": user_id,
            "messages.timestamp": {"$gte": today_start.isoformat()}
        })

        if message_count >= 3:
            bot.send_message(message.chat.id, "üìµ –õ–∏–º–∏—Ç: –Ω–µ –±–æ–ª–µ–µ 3 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏.")
            return


    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç–æ—Ç–µ (30 —Å–µ–∫—É–Ω–¥)
    if user_id in user_last_access:
        last_time = user_last_access[user_id]
        if now - last_time < timedelta(minutes=5):
            bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
            return
    user_last_access[user_id] = now

   # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å timestamp
    users_collection.update_one(
        {"user_id": user_id},
        {"$push": {
            "messages": {
                "text": text,
                "timestamp": datetime.utcnow().isoformat()
            }
        }}
    )

    # –û—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ LangChain-–ø–∞–π–ø–ª–∞–π–Ω
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–æ–∂–∏–¥–∞–Ω–∏–µ" –∏ –ø–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        status_msg = bot.send_message(message.chat.id, "‚åõ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")

       # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        def progress_callback(stage_text):
            try:
                bot.edit_message_text(chat_id=message.chat.id,
                                      message_id=status_msg.message_id,
                                      text=stage_text)
            except Exception as e:
                print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
        answer = query(text, progress_callback=progress_callback)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —Å timestamp
        users_collection.update_one(
            {"user_id": user_id},
            {"$push": {
                "answers": {
                    "text": answer,
                    "timestamp": datetime.now(timezone.utc).isoformat()
                }
            }}
        )
        # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç
        users_collection.update_one(
            {"user_id": user_id},
            {"$inc": {"message_limit": -1}}
        )
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        bot.edit_message_text(chat_id=message.chat.id,
                              message_id=status_msg.message_id,
                              text=answer)
    except Exception as e:
        print(f"[ERROR] {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(content_types=['photo', 'document'])
def handle_payment_file(message):
    user_id = message.from_user.id
    ADMIN_USER_IDS = [376068212, 827743984]

    caption = (
        f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è:\n"
        f"üë§ Telegram ID: {user_id}\n"
        f"üìé –¢–∏–ø: {'—Ñ–æ—Ç–æ' if message.content_type == 'photo' else '–¥–æ–∫—É–º–µ–Ω—Ç'}\n"
        f"üì∏ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )

    for admin_id in ADMIN_USER_IDS:
        try:
            bot.forward_message(chat_id=admin_id, from_chat_id=message.chat.id, message_id=message.message_id)
            bot.send_message(admin_id, caption)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    bot.send_message(
        message.chat.id,
        "‚úÖ –°–ø–∞—Å–∏–±–æ, —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: +77007000000"
    )


while True:
    try:
        bot.polling(none_stop=True, timeout=60)
    except Exception as e:
        print(f"[ERROR] polling crashed: {e}")
        time.sleep(5)  # –∂–¥—ë–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º