import telebot
import os
from dotenv import load_dotenv
from pymongo import MongoClient
from admin_consultation import AdminConsultationManager, ConsultationNotificationScheduler
from bankruptcy_calculator import analyze_credit_report_for_bankruptcy
from collateral_parser import extract_collateral_info
from legal_engine import query
from datetime import datetime, timezone, timedelta
from telebot import types
from document_processor import process_uploaded_file
from credit_parser import FallbackParser, GKBParser, PKBParser, format_summary
import time
import requests
from pydub import AudioSegment
import openai
from creditor_handler import process_all_creditors_request
from smart_handler import SmartHandler

# –ü–∞—Ä—Å–µ—Ä –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ document_processor

load_dotenv()

print(f"[INFO] –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {os.getenv('ENV', 'prod')}")

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)
CHANNEL_ID = -1002275474152  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
smart_handler = SmartHandler(bot)

notification_scheduler = ConsultationNotificationScheduler(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas
MONGO_URI = os.getenv("MONGO_URI")
client = MongoClient(MONGO_URI)

# –í—ã–±–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
db = client['telegram_bot']
users_collection = db['users']

# –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∫—É—Ä—Å–æ–≤ (–¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏)
courses_collection = db['courses']
lessons_collection = db['lessons'] 
course_access_collection = db['course_access']
user_progress_collection = db['user_progress']
# –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
consultation_slots_collection = db['consultation_slots']
consultation_queue_collection = db['consultation_queue']
temp_videos_collection = db['temp_videos']

# –ü—Ä–æ—Å—Ç–∞—è –∞–Ω—Ç–∏–≤–∞–Ω–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø
user_last_access = {}
user_states = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_available_consultation_slots():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞"""
    from datetime import datetime, timedelta

    available_slots = []
    
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ 3 –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    today = datetime.now()
    days_until_monday = (7 - today.weekday()) % 7
    if days_until_monday == 0 and today.hour >= 17:  # –ï—Å–ª–∏ —É–∂–µ –ø–æ–∑–¥–Ω–æ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        days_until_monday = 7

    for week in range(3):  # –ë–ª–∏–∂–∞–π—à–∏–µ 3 –Ω–µ–¥–µ–ª–∏
        monday_date = today + timedelta(days=days_until_monday + (week * 7))
        date_str = monday_date.strftime("%Y-%m-%d")
        date_formatted = monday_date.strftime("%d.%m.%Y")
        
        for hour in [14, 15, 16]:  # —Å–ª–æ—Ç—ã –Ω–∞ 14:00, 15:00, 16:00
            slot_id = f"{date_str}_{hour:02d}:00"
            time_display = f"{hour:02d}:00-{hour+1:02d}:00"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞
            existing_slot = consultation_slots_collection.find_one({"slot_id": slot_id})
            
            if not existing_slot:
                consultation_slots_collection.insert_one({
                    "date": date_str,
                    "time_slot": time_display,
                    "slot_id": slot_id,
                    "status": "open",
                    "max_capacity": 1,
                    "created_at": datetime.utcnow(),
                    "admin_notes": ""
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—á–µ—Ä–µ–¥—å
            slot = consultation_slots_collection.find_one({"slot_id": slot_id})
            if slot and slot["status"] == "open":
                queue_count = consultation_queue_collection.count_documents({
                    "slot_id": slot_id,
                    "status": {"$nin": ["cancelled", "completed"]}
                })

                available_slots.append({
                    "slot_id": slot_id,
                    "date": date_str,
                    "date_formatted": date_formatted,
                    "time_display": time_display,
                    "queue_length": queue_count
                })

    return available_slots

def handle_slot_booking(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–æ—Ç"""
    user_id = call.from_user.id
    first_name = call.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    last_name = call.from_user.last_name or ""
    user_name = f"{first_name} {last_name}".strip()
    
    slot_id = call.data.replace("book_slot_", "")

    # ‚úÖ –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –õ–Æ–ë–£–Æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    any_active_booking = consultation_queue_collection.find_one({
        "user_id": user_id,                              # ‚Üê –õ–Æ–ë–û–ô —Å–ª–æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "status": {"$nin": ["cancelled", "completed"]}   # ‚Üê –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    })
    
    if any_active_booking:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
        existing_slot_id = any_active_booking["slot_id"]
        date_str, time_str = existing_slot_id.split("_")
        slot_date = datetime.strptime(date_str, "%Y-%m-%d")
        formatted_date = slot_date.strftime("%d.%m.%Y")
        end_hour = int(time_str.split(':')[0]) + 1
        time_display = f"{time_str}-{end_hour:02d}:00"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_consultations"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ª–æ—Ç–∞–º", callback_data="free_consultation"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ö†Ô∏è **–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é**\n\n"
                 f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                 f"üïê –í—Ä–µ–º—è: {time_display}\n"
                 f"üìç –ú–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {any_active_booking['position']}\n"
                 f"üìä –°—Ç–∞—Ç—É—Å: {get_status_text(any_active_booking['status'])}\n\n"
                 f"üí° –ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n"
                 f"–û—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=markup,
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_booking = consultation_queue_collection.find_one({
        "slot_id": slot_id,
        "user_id": user_id,
        "status": {"$nin": ["cancelled", "completed"]}
    })
    
    if existing_booking:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ª–æ—Ç–∞–º", callback_data="free_consultation"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ö†Ô∏è **–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é**\n\n"
                 f"üìç –í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {existing_booking['position']}\n"
                 f"üìä –°—Ç–∞—Ç—É—Å: {get_status_text(existing_booking['status'])}",
            reply_markup=markup,
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
    slot = consultation_slots_collection.find_one({"slot_id": slot_id})
    if not slot or slot["status"] != "open":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ª–æ—Ç–∞–º", callback_data="free_consultation"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå **–°–ª–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
                 "–≠—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=markup,
            parse_mode='Markdown'
        )
        return
    
    # –ó–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å
    queue_size = consultation_queue_collection.count_documents({
        "slot_id": slot_id,
        "status": {"$nin": ["cancelled", "completed"]}
    })
    new_position = queue_size + 1

    consultation_queue_collection.insert_one({
        "slot_id": slot_id,
        "user_id": user_id,
        "user_name": user_name,
        "position": new_position,
        "status": "waiting",
        "registered_at": datetime.utcnow(),
        "confirmed_day_at": None,
        "confirmed_hour_at": None,
        "notifications_sent": {
            "day_before": False,
            "hour_before": False
        }
    })

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø–∏—Å—å
    date_str, time_str = slot_id.split("_")
    slot_date = datetime.strptime(date_str, "%Y-%m-%d")
    formatted_date = slot_date.strftime("%d.%m.%Y")
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_consultations"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
    
    pos_text = "–ø–µ—Ä–≤—ã–µ" if new_position == 1 else f"{new_position}-–µ –º–µ—Å—Ç–æ"
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚úÖ **–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞!**\n\n"
             f"üìÖ –î–∞—Ç–∞: {formatted_date} (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)\n"
             f"üïê –í—Ä–µ–º—è: {time_str}-{int(time_str.split(':')[0]) + 1:02d}:00\n"
             f"üìç –í–∞—à–µ –º–µ—Å—Ç–æ: {pos_text}\n\n"
             "üì≤ –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
             "‚Ä¢ –ó–∞ –¥–µ–Ω—å –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
             "‚Ä¢ –ó–∞ —á–∞—Å –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
             "üí° –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ —É—á–∞—Å—Ç–∏–µ!",
        reply_markup=markup,
        parse_mode='Markdown'
    )

def get_status_text(status):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    status_map = {
        "waiting": "–û–∂–∏–¥–∞–Ω–∏–µ",
        "confirmed_day": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (–∑–∞ –¥–µ–Ω—å)",
        "confirmed_hour": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (–∑–∞ —á–∞—Å)",
        "cancelled": "–û—Ç–º–µ–Ω–µ–Ω",
        "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω"
    }
    return status_map.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

def handle_my_consultations(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    user_bookings = list(consultation_queue_collection.find({
        "user_id": user_id,
        "status": {"$nin": ["cancelled", "completed"]}
    }).sort("registered_at", 1))

    if not user_bookings:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="free_consultation"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üìã **–ú–æ–∏ –∑–∞–ø–∏—Å–∏**\n\n"
                 "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n"
                 "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
            reply_markup=markup,
            parse_mode='Markdown'
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    bookings_text = "üìã **–ú–æ–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:**\n\n"
    markup = types.InlineKeyboardMarkup(row_width=1)

    for booking in user_bookings:
        slot_id = booking["slot_id"]
        date_str, time_str = slot_id.split("_")
        slot_date = datetime.strptime(date_str, "%Y-%m-%d")
        formatted_date = slot_date.strftime("%d.%m.%Y")
        end_hour = int(time_str.split(':')[0]) + 1
        time_display = f"{time_str}-{end_hour:02d}:00"
        status_text = get_status_text(booking["status"])
        position = booking["position"]

        bookings_text += f"üìÖ **{formatted_date}** –≤ **{time_display}**\n"
        bookings_text += f"üìç –ú–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {position}\n"
        bookings_text += f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"

        now = datetime.now()
        consultation_dt = datetime.combine(slot_date.date(), datetime.strptime(time_str, "%H:%M").time())
        if consultation_dt > now:
            delta = consultation_dt - now
            days = delta.days
            hours = delta.seconds // 3600
            if days > 0:
                bookings_text += f"‚è∞ –ß–µ—Ä–µ–∑ {days} –¥–Ω. {hours} —á.\n"
            elif hours > 0:
                bookings_text += f"‚è∞ –ß–µ—Ä–µ–∑ {hours} —á.\n"
            else:
                bookings_text += f"‚è∞ –°–∫–æ—Ä–æ!\n"
        
        bookings_text += "\n"

        markup.add(types.InlineKeyboardButton(
            f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {formatted_date} {time_str}",
            callback_data=f"cancel_booking_{booking['_id']}"
        ))

    markup.add(types.InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â–µ", callback_data="free_consultation"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=bookings_text,
        reply_markup=markup,
        parse_mode='Markdown'
    )

def handle_cancel_booking(call):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å"""
    from bson import ObjectId
    user_id = call.from_user.id
    booking_id = call.data.replace("cancel_booking_", "")

    try:
        booking = consultation_queue_collection.find_one({
            "_id": ObjectId(booking_id),
            "user_id": user_id
        })

        if not booking:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        slot_id = booking["slot_id"]
        cancelled_position = booking["position"]

        consultation_queue_collection.update_one(
            {"_id": ObjectId(booking_id)},
            {
                "$set": {
                    "status": "cancelled",
                    "cancelled_at": datetime.utcnow()
                }
            }
        )

        consultation_queue_collection.update_many(
            {
                "slot_id": slot_id,
                "position": {"$gt": cancelled_position},
                "status": {"$nin": ["cancelled", "completed"]}
            },
            {"$inc": {"position": -1}}
        )

        promoted_users = list(consultation_queue_collection.find({
            "slot_id": slot_id,
            "position": {"$lte": cancelled_position},
            "status": {"$nin": ["cancelled", "completed"]},
            "user_id": {"$ne": user_id}
        }))

        for promoted_user in promoted_users:
            try:
                date_str, time_str = slot_id.split("_")
                slot_date = datetime.strptime(date_str, "%Y-%m-%d")
                formatted_date = slot_date.strftime("%d.%m.%Y")
                end_hour = int(time_str.split(':')[0]) + 1
                time_display = f"{time_str}-{end_hour:02d}:00"
                new_position = promoted_user["position"]

                if new_position == 1:
                    msg = (
                        f"üéâ **–û—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å!**\n\n"
                        f"–í—ã —Å—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã–º –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
                        f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                        f"üïê –í—Ä–µ–º—è: {time_display}\n\n"
                        f"üì≤ –ú—ã –ø—Ä–∏—à–ª–µ–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π."
                    )
                else:
                    msg = (
                        f"üìà **–í—ã –ø—Ä–æ–¥–≤–∏–Ω—É–ª–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏!**\n\n"
                        f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                        f"üïê –í—Ä–µ–º—è: {time_display}\n"
                        f"üìç –ù–æ–≤–æ–µ –º–µ—Å—Ç–æ: {new_position}\n\n"
                        f"üéØ –í—ã —Å—Ç–∞–ª–∏ –±–ª–∏–∂–µ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!"
                    )

                bot.send_message(promoted_user["user_id"], msg, parse_mode='Markdown')

            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {promoted_user['user_id']}: {e}")

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_consultations"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))

        date_str, time_str = slot_id.split("_")
        slot_date = datetime.strptime(date_str, "%Y-%m-%d")
        formatted_date = slot_date.strftime("%d.%m.%Y")
        end_hour = int(time_str.split(':')[0]) + 1
        time_display = f"{time_str}-{end_hour:02d}:00"

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚úÖ **–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
                 f"üìÖ –û—Ç–º–µ–Ω–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {formatted_date} –≤ {time_display}\n\n"
                 "üë• –û—á–µ—Ä–µ–¥—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞.\n"
                 "üì≤ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.",
            reply_markup=markup,
            parse_mode='Markdown'
        )

        print(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ {slot_id}, –ø–æ–∑–∏—Ü–∏—è {cancelled_position}")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏")

def confirm_consultation_participation(call, booking_id, stage):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    from bson import ObjectId
    booking = consultation_queue_collection.find_one({"_id": ObjectId(booking_id)})

    if not booking or booking["status"] != "waiting":
        bot.answer_callback_query(call.id, "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞")
        return

    update = {"status": f"confirmed_{stage}"}
    if stage == "day":
        update["confirmed_day_at"] = datetime.utcnow()
    elif stage == "hour":
        update["confirmed_hour_at"] = datetime.utcnow()

    consultation_queue_collection.update_one(
        {"_id": ObjectId(booking_id)},
        {"$set": update}
    )

    bot.answer_callback_query(call.id, "‚úÖ –£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)

def cancel_consultation_booking(call, booking_id, reason):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏"""
    from bson import ObjectId
    booking = consultation_queue_collection.find_one({"_id": ObjectId(booking_id)})

    if not booking:
        bot.answer_callback_query(call.id, "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    slot_id = booking["slot_id"]

    consultation_queue_collection.update_one(
        {"_id": ObjectId(booking_id)},
        {"$set": {
            "status": "cancelled",
            "cancelled_at": datetime.utcnow(),
            "cancelled_reason": reason
        }}
    )

    # –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    try:
        from consultation_scheduler import ConsultationScheduler
        scheduler = ConsultationScheduler()
        scheduler.promote_queue(slot_id, reason=reason)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å: {e}")

    bot.answer_callback_query(call.id, "‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)

def send_long_message(bot, chat_id, text, reply_markup=None, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º"""
    
    MAX_LENGTH = 4000  # –ú–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    if len(text) <= MAX_LENGTH:
        bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        return
    
    # –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    parts = []
    lines = text.split('\n')  # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    current_part = ""
    
    for line in lines:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞
        if len(current_part + line) <= MAX_LENGTH:
            if current_part:
                current_part += '\n'
            current_part += line
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
            if current_part:
                parts.append(current_part)
            current_part = line
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if current_part:
        parts.append(current_part)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for i, part in enumerate(parts):
        # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        markup = reply_markup if i == len(parts) - 1 else None
        
        bot.send_message(
            chat_id=chat_id,
            text=part,
            reply_markup=markup,
            parse_mode=parse_mode
        )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        import time
        time.sleep(0.3)

@bot.message_handler(commands=['start'])
def main(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    existing_user = users_collection.find_one({"user_id": user_id})
    if not existing_user:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_collection.insert_one({
            "user_id": user_id,
            "first_name": first_name,
            "last_name": last_name,
            "access": False,
            "message_limit": 0,
            "messages": []
        })
    # üõ† –ó–∞–º–µ–Ω–∏–ª–∏ —Ä—É—á–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é
    markup = create_main_menu()
    
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!\n\n"
        "ü§ñ –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:"
    )
    
    bot.send_message(
        message.chat.id,
        welcome_text,
        reply_markup=markup
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    ADMIN_USER_IDS = [376068212, 827743984]
    if user_id not in ADMIN_USER_IDS:
        timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M UTC")
        admin_text = (
            "üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
            f"üë§ –ò–º—è: {first_name} {last_name}\n"
            f"üÜî ID: {user_id}\n"
            f"üïí –í—Ä–µ–º—è: {timestamp}"
        )
        for admin_id in ADMIN_USER_IDS:
            try:
                bot.send_message(admin_id, admin_text)
            except Exception as e:
                print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@bot.message_handler(commands=['slots_today'])
def view_today_slots(message):
    ADMIN_USER_IDS = [376068212, 827743984]
    if message.from_user.id not in ADMIN_USER_IDS:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    from admin_consultation import AdminConsultationManager
    manager = AdminConsultationManager(bot, user_states)
    manager.show_today_slots(message)

@bot.message_handler(commands=["admin_consultations"])
def handle_admin_consultations(message):
    from admin_consultation import AdminConsultationManager
    manager = AdminConsultationManager(bot, user_states)
    manager.show_admin_menu(message)

@bot.message_handler(commands=['admin'])
def handle_admin_command(message):
    from admin_consultation import AdminConsultationManager
    manager = AdminConsultationManager(bot, user_states)
    manager.show_admin_menu(message)

# @bot.callback_query_handler(func=lambda call: True)
# def handle_callback_query(call):
#     user_id = call.from_user.id
    
#     if call.data == "lawyer_consultation":
#         handle_lawyer_consultation(call)
#     elif call.data == "check_credit_report":
#         handle_credit_report_request(call)
#     elif call.data == "bankruptcy_calculator":
#         handle_bankruptcy_calculator(call)
#     elif call.data == "bot_info":
#         handle_bot_info(call)
#     elif call.data.startswith("pay_"):
#         handle_payment_callback(call)
#     elif call.data == "back_to_menu":
#         # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
#         main_menu_markup = create_main_menu()
#         bot.edit_message_text(
#             chat_id=call.message.chat.id,
#             message_id=call.message.message_id,
#             text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:",
#             reply_markup=main_menu_markup
#         )
    
#     bot.answer_callback_query(call.id)

def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    lawyer_btn = types.InlineKeyboardButton(
        "‚öñÔ∏è –ü–µ—Ä–µ–ø–∏—Å–∫–∞ (–ø–ª–∞—Ç–Ω–æ) üí∞",
        callback_data="lawyer_consultation"
    )
    consultation_btn = types.InlineKeyboardButton(
        "üìÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è üÜì",
        callback_data="free_consultation"
    )
    credit_btn = types.InlineKeyboardButton(
        "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç (–±–µ—Å–ø–ª–∞—Ç–Ω–æ) üÜì", 
        callback_data="check_credit_report"
    )
    bankruptcy_btn = types.InlineKeyboardButton(
        "üßÆ –ë–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (–±–µ—Å–ø–ª–∞—Ç–Ω–æ) üÜì", 
        callback_data="bankruptcy_calculator"
    )
    creditors_list_btn = types.InlineKeyboardButton(
        "üìã –°–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤ PDF (–±–µ—Å–ø–ª–∞—Ç–Ω–æ) üÜì",
        callback_data="creditors_list"
    )
    courses_btn = types.InlineKeyboardButton(
        "üé• –í–∏–¥–µ–æ-–∫—É—Ä—Å—ã", 
        callback_data="video_courses"
    )
    info_btn = types.InlineKeyboardButton(
        "‚ÑπÔ∏è –û –±–æ—Ç–µ", 
        callback_data="bot_info"
    )
    
    markup.add(lawyer_btn, credit_btn, bankruptcy_btn, creditors_list_btn, consultation_btn, info_btn, courses_btn)
    return markup

def handle_lawyer_consultation(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —é—Ä–∏—Å—Ç–∞"""
    user_id = call.from_user.id
    user = users_collection.find_one({"user_id": user_id})
    
    if not user or not user.get("access", False):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã
        markup = types.InlineKeyboardMarkup()
        
        markup.add(types.InlineKeyboardButton("üí∞ 5 000 ‚Ç∏ - 10 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="pay_5000"))
        markup.add(types.InlineKeyboardButton("üí∞ 10 000 ‚Ç∏ - 25 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="pay_10000"))
        markup.add(types.InlineKeyboardButton("üí∞ 15 000 ‚Ç∏ - 50 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="pay_15000"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
        
        payment_text = (
            "‚öñÔ∏è **–ü–µ—Ä–µ–ø–∏—Å–∫–∞**\n\n" 
            "üí° –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å:\n"
            "‚Ä¢ –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–∏—á–µ—Å–∏–∫—Ö –ª–∏—Ü –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ\n"
            "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –í–Ω–µ—Å—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ\n"
            "‚Ä¢ –°—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ\n\n"
            "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:"
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=payment_text,
            reply_markup=markup,
            parse_mode='Markdown'
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        if user.get("message_limit", 0) <= 0:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìµ –í–∞—à –ª–∏–º–∏—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                )
            )
        else:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            user_states[user_id] = "lawyer_consultation"
            
            remaining = user.get("message_limit", 0)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"‚öñÔ∏è **–†–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**\n\n"
                     f"üìù –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {remaining}\n\n"
                     f"‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ, –∏ —è –¥–∞–º —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.",
                parse_mode='Markdown',
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                )
            )

def handle_credit_report_request(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    user_id = call.from_user.id
    user_states[user_id] = "waiting_credit_report"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç?", callback_data="how_to_get_report"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    
    instruction_text = (
        "üìä **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞**\n\n"
        "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –≤–∞—à–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–∑:\n"
        "‚Ä¢ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –±—é—Ä–æ (–ì–ö–ë)\n"
        "‚Ä¢ –ü–µ—Ä–≤–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –±—é—Ä–æ (–ü–ö–ë)\n\n"
        "üéØ –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç—á–µ—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é:\n"
        "‚Ä¢ –û–±—â—É—é —Å—É–º–º—É –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤\n"
        "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ä–æ—á–∫–∞—Ö\n"
        "‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É\n\n"
        "üìé **–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å**"
    )
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=instruction_text,
        reply_markup=markup,
        parse_mode='Markdown'
    )

def handle_bot_info(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    
    info_text = (
        "‚ÑπÔ∏è **–û –±–æ—Ç–µ**\n\n"
        "ü§ñ –Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n\n"
        "**–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–ø–ª–∞—Ç–Ω–æ)\n"
        "üìä –ê–Ω–∞–ª–∏–∑ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
        "üé§ –†–∞–±–æ—Ç–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n\n"
        "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç—á–µ—Ç–æ–≤:**\n"
        "‚Ä¢ –ì–ö–ë (–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –±—é—Ä–æ)\n"
        "‚Ä¢ –ü–ö–ë (–ü–µ—Ä–≤–æ–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –±—é—Ä–æ)\n"
        "‚Ä¢ –ö–∞–∑–∞—Ö—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫–∏\n\n"
        "üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** +77027568921"
    )
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=info_text,
        reply_markup=markup,
        parse_mode='Markdown'
    )

def handle_payment_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã"""
    amount_map = {
        "pay_5000": ("5 000", "10 –≤–æ–ø—Ä–æ—Å–æ–≤"),
        "pay_10000": ("10 000", "25 –≤–æ–ø—Ä–æ—Å–æ–≤"),
        "pay_15000": ("15 000", "50 –≤–æ–ø—Ä–æ—Å–æ–≤")
    }
    
    amount, questions = amount_map.get(call.data, ("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞", "0 –≤–æ–ø—Ä–æ—Å–æ–≤"))
    
    if amount == "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞":
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="lawyer_consultation"))
    
    payment_text = (
        f"üí≥ **–û–ø–ª–∞—Ç–∞ {amount} ‚Ç∏**\n"
        f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions}\n\n"
        f"üè¶ **–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**\n"
        f"üí≥ Kaspi: https://pay.kaspi.kz/pay/izbl0ktq\n\n"
        f"üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞."
    )
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=payment_text,
        reply_markup=markup,
        parse_mode='Markdown'
    )

    # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ handle_payment_callback

def handle_bankruptcy_calculator(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
    user_id = call.from_user.id
    user_states[user_id] = "waiting_bankruptcy_report"  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç?", callback_data="how_to_get_report"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=(
            "üßÆ **–ë–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä**\n\n"
            "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª –≤–∞—à–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–∑ –ü–ö–ë –∏–ª–∏ –ì–ö–ë.\n\n"
            "üîç **–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç:**\n"
            "‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–Ω–µ—Å—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ\n"
            "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Å—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ  \n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏\n\n"
            "üìä **–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:**\n"
            "‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–∞ (–ø–æ—Ä–æ–≥ 6,291,200 ‚Ç∏)\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (–º–∏–Ω–∏–º—É–º 365)\n"
            "‚Ä¢ –ù–∞–ª–∏—á–∏–µ –∑–∞–ª–æ–≥–æ–≤–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞\n\n"
            "üìé **–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å**"
        ),
        reply_markup=markup,
        parse_mode='Markdown'
    )

def handle_creditors_list_request(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤"""
    user_id = call.from_user.id
    user_states[user_id] = "waiting_creditors_list"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç?", callback_data="how_to_get_report"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    
    instruction_text = (
        "üìã **–°–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤ PDF**\n\n"
        "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –≤–∞—à–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–∑ –ì–ö–ë –∏–ª–∏ –ü–ö–ë.\n\n"
        "üéØ **–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ:**\n"
        "‚Ä¢ –û–¥–∏–Ω PDF-–¥–æ–∫—É–º–µ–Ω—Ç —Å–æ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π –≤—Å–µ—Ö –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤\n"
        "‚Ä¢ –ù–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ —Å—É–º–º—ã –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –î–∞—Ç—ã –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–æ–ª–≥–æ–≤\n"
        "‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –ø—Ä–æ—Å—Ä–æ—á–µ–∫\n"
        "‚Ä¢ –ì–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞\n\n"
        "üí° **–û—Ç–ª–∏—á–∏–µ –æ—Ç –æ–±—ã—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:**\n"
        "‚Ä¢ –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º\n"
        "‚Ä¢ –°–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –æ–¥–Ω–æ–º PDF\n"
        "‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞—è–≤–ª–µ–Ω–∏—é –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ\n\n"
        "üìé **–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å**"
    )
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=instruction_text,
        reply_markup=markup,
        parse_mode='Markdown'
    )

def handle_free_consultation_request(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    user_id = call.from_user.id
    user_states[user_id] = "selecting_consultation_slot"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∏
    available_slots = get_available_consultation_slots()
    
    if not available_slots:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üìÖ **–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è**\n\n"
                 "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –Ω–µ–¥–µ–ª–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã.\n"
                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.",
            reply_markup=markup,
            parse_mode='Markdown'
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for slot in available_slots:
        slot_text = f"üìÖ {slot['date_formatted']} –≤ {slot['time_display']}"
        if slot['queue_length'] > 0:
            slot_text += f" (–æ—á–µ—Ä–µ–¥—å: {slot['queue_length']})"
        
        markup.add(types.InlineKeyboardButton(
            slot_text,
            callback_data=f"book_slot_{slot['slot_id']}"
        ))
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üìÖ **–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è**\n\n"
             "üïê **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:** –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å 14:00 –¥–æ 17:00\n"
             "‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 1 —á–∞—Å\n"
             "üìã **–§–æ—Ä–º–∞—Ç:** Telegram —á–∞—Ç —Å —é—Ä–∏—Å—Ç–æ–º\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
        reply_markup=markup,
        parse_mode='Markdown'
    )

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ document_processor

# –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é handle_document –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–∞–Ω–∫—Ä–æ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:
@bot.message_handler(content_types=['document'])
def handle_document(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF –¥–ª—è –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏ —á–µ–∫–∏ –æ–± –æ–ø–ª–∞—Ç–µ)"""
    user_id = message.from_user.id
    current_state = user_states.get(user_id)
    
    if current_state in ["waiting_credit_report", "waiting_bankruptcy_report"]:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–≤–∫–ª—é—á–∞—è –±–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
        handle_credit_report_pdf(message)
    elif current_state == "waiting_creditors_list":  # ‚≠ê –ù–û–í–û–ï –£–°–õ–û–í–ò–ï
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤
        handle_creditors_list_pdf(message)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
        handle_payment_receipt(message)

# –î–æ–±–∞–≤–∏—Ç—å –≤ main.py

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é handle_credit_report_pdf:
def handle_credit_report_pdf(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∑–∞—è–≤–ª–µ–Ω–∏–π –ò –±–∞–Ω–∫—Ä–æ—Ç–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    user_id = message.from_user.id
    current_state = user_states.get(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_bankruptcy_mode = current_state == "waiting_bankruptcy_report"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF —Ñ–∞–π–ª
        file_name = message.document.file_name
        if not file_name or not file_name.lower().endswith('.pdf'):
            bot.reply_to(
                message, 
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if is_bankruptcy_mode:
            status_msg = bot.send_message(
                message.chat.id, 
                "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞...\nüìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF..."
            )
        else:
            status_msg = bot.send_message(
                message.chat.id, 
                "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç...\nüìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF..."
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        file_info = bot.get_file(message.document.file_id)
        file_path = f"temp/{file_name}"
        os.makedirs("temp", exist_ok=True)
        
        with open(file_path, "wb") as f:
            f.write(bot.download_file(file_info.file_path))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if is_bankruptcy_mode:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text="‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞...\nüßÆ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –±–∞–Ω–∫—Ä–æ—Ç–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏..."
            )
        else:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text="‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç...\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ..."
            )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from text_extractor import extract_text_from_pdf
        from ocr import ocr_file
        from credit_parser import extract_credit_data_with_total
        
        # # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
        # text = extract_text_from_pdf(file_path)
        # if not text.strip():
        #     text = ocr_file(file_path)
        
        # # –ü–∞—Ä—Å–∏–º –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç
        # parsed_data = extract_credit_data_with_total(text)
        if is_bankruptcy_mode:
            # üßÆ –ë–ê–ù–ö–†–û–¢–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†: –∏—Å–ø–æ–ª—å–∑—É–µ–º GKBParser –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            # print(f"[INFO] –ë–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ø–æ—á–∫—É –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {file_path}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É –ø–∞—Ä—Å–µ—Ä–æ–≤ (–∫–∞–∫ –≤ document_processor.py)
            from text_extractor import extract_text_from_pdf
            from ocr import ocr_file
            
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
            text = extract_text_from_pdf(file_path)
            if not text.strip():
                text = ocr_file(file_path)
            
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É –ø–∞—Ä—Å–µ—Ä–æ–≤ (–∫–∞–∫ –≤ document_processor.py)
            gkb_parser = GKBParser()
            pkb_parser = PKBParser()
            fallback_parser = FallbackParser()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É: GKB -> PKB -> Emergency
            gkb_parser.set_next(pkb_parser).set_next(fallback_parser)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É
            # print(f"[INFO] –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–ø–æ—á–∫—É –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è –±–∞–Ω–∫—Ä–æ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            parsed_data = gkb_parser.parse(text)
            
            parsed_data["collaterals"] = extract_collateral_info(text)
            # print(f"[INFO] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(parsed_data.get('obligations', []))} –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –Ω–∞–π–¥–µ–Ω–æ")
            
        else:
            # üìä –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º)
            print(f"[INFO] –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –º–æ–¥—É–ª–∏
            from text_extractor import extract_text_from_pdf
            from ocr import ocr_file
            from credit_parser import extract_credit_data_with_total
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            text = extract_text_from_pdf(file_path)
            if not text.strip():
                text = ocr_file(file_path)
            
            # –ü–∞—Ä—Å–∏–º –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            parsed_data = extract_credit_data_with_total(text)
        # üÜï –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò –°–¢–†–û–ö–ò - –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)  
        try:
            process_uploaded_file(file_path, user_id)
            print(f"[INFO] –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        except Exception as save_error:
            print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {save_error}")

        if is_bankruptcy_mode:
            # –†–ï–ñ–ò–ú –ë–ê–ù–ö–†–û–¢–ù–û–ì–û –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê
            
            # –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
            bankruptcy_analysis = analyze_credit_report_for_bankruptcy(parsed_data)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
            markup.add(types.InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç—á–µ—Ç", callback_data="bankruptcy_calculator"))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–∞–Ω–∫—Ä–æ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text="‚úÖ **–ë–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω**",
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            send_long_message(
                bot=bot,   
                chat_id=message.chat.id,
                text=bankruptcy_analysis,
                reply_markup=markup,
                parse_mode='Markdown'
            )
            
        else:
            # –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú –ü–†–û–í–ï–†–ö–ò –ö–†–ï–î–ò–¢–ù–û–ì–û –û–¢–ß–ï–¢–ê
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏–π
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text="‚è≥ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞—è–≤–ª–µ–Ω–∏—è –∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º..."
            )
            
            # –ó–ê–ú–ï–ù–ò–¢–ï —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ try/except –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–≤—ã–π:
            try:
                from credit_application_generator import generate_applications_from_parsed_data
                result = generate_applications_from_parsed_data(parsed_data, user_id)
                # print(f"[INFO] –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: —Å—Ç–∞—Ç—É—Å={result.get('status')}, –∑–∞—è–≤–ª–µ–Ω–∏–π={result.get('applications_count', 0)}")
            except Exception as generation_error:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏–π: {generation_error}")
                import traceback
                traceback.print_exc()
                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                result = {
                    "status": "error",
                    "message": format_summary(parsed_data),
                    "type": "credit_report",
                    "applications": [],
                    "applications_count": 0
                }
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
            markup.add(types.InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç—á–µ—Ç", callback_data="check_credit_report"))
            markup.add(types.InlineKeyboardButton("üßÆ –ë–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="bankruptcy_calculator"))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            if result and "message" in result:
                
                # –î–û–ë–ê–í–¨–¢–ï —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ:
                if result.get('status') == 'error':
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–∞
                    send_long_message(
                        bot=bot,
                        chat_id=message.chat.id,
                        text=f"‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n{result['message']}\n\n‚ö†Ô∏è –ó–∞—è–≤–ª–µ–Ω–∏—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                    bankruptcy_analysis = analyze_credit_report_for_bankruptcy(parsed_data)
                    bot.send_message(
                        chat_id=message.chat.id,
                        text=f"üßÆ **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ë–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑**\n\n{bankruptcy_analysis}",
                        parse_mode='Markdown'
                    )
                    
                else:
                    # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ö–û–î –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô:
                    send_long_message(
                        bot=bot,
                        chat_id=message.chat.id,
                        text=f"‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n{result['message']}",
                        reply_markup=markup,
                        parse_mode='Markdown'
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if result.get('applications'):
                    applications = result['applications']
                    bot.send_message(
                        chat_id=message.chat.id,
                        text=f"üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é {len(applications)} –∑–∞—è–≤–ª–µ–Ω–∏–π –∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º..."
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π PDF
                    for i, app in enumerate(applications, 1):
                        try:
                            temp_pdf_path = f"temp/application_{i}_{user_id}.pdf"
                            with open(temp_pdf_path, 'wb') as f:
                                f.write(app['content'])
                            
                            with open(temp_pdf_path, 'rb') as pdf_file:
                                bot.send_document(
                                    chat_id=message.chat.id,
                                    document=pdf_file,
                                    caption=f"üìã –ó–∞—è–≤–ª–µ–Ω–∏–µ #{i}: {app['creditor']}\nüí∞ –°—É–º–º–∞ –¥–æ–ª–≥–∞: {app['debt_amount']:,.2f} ‚Ç∏",
                                    visible_file_name=app['filename']
                                )
                            
                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            try:
                                os.remove(temp_pdf_path)
                            except:
                                pass
                                
                        except Exception as e:
                            print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è {i}: {e}")
                    
                    # # –î–û–ë–ê–í–õ–Ø–ï–ú –ë–ê–ù–ö–†–û–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    # bankruptcy_analysis = analyze_credit_report_for_bankruptcy(parsed_data)
                    
                    # bot.send_message(
                    #     chat_id=message.chat.id,
                    #     text=f"üßÆ **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ë–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑**\n\n{bankruptcy_analysis}",
                    #     parse_mode='Markdown'
                    # )
                    
                    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    bot.send_message(
                        chat_id=message.chat.id,
                        text=f"‚úÖ **–ì–æ—Ç–æ–≤–æ!**\n\n"
                             f"üìä –û—Ç—á–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
                             f"üìÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(applications)} –∑–∞—è–≤–ª–µ–Ω–∏–π\n"
                             f"üßÆ –ü—Ä–æ–≤–µ–¥–µ–Ω –±–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
                             f"üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:**\n"
                             f"1. –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏—è\n"  
                             f"2. –ü–æ–¥–ø–∏—à–∏—Ç–µ –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –¥–∞—Ç—É\n"
                             f"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º –ø–æ –ø–æ—á—Ç–µ\n"
                             f"4. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É",
                        parse_mode='Markdown'
                    )
                else:
                    # –ï—Å–ª–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                    bankruptcy_analysis = analyze_credit_report_for_bankruptcy(parsed_data)
                    
                    bot.send_message(
                        chat_id=message.chat.id,
                        text=f"üßÆ **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ë–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑**\n\n{bankruptcy_analysis}",
                        parse_mode='Markdown'
                    )
            else:
                bot.send_message(
                    chat_id=message.chat.id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç.",
                    reply_markup=markup
                )
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(file_path)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        try:
            bot.delete_message(chat_id=message.chat.id, message_id=status_msg.message_id)
        except:
            pass
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states.pop(user_id, None)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        mode = "–±–∞–Ω–∫—Ä–æ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞" if is_bankruptcy_mode else "–∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
        print(f"[INFO] –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω {mode} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        try:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except:
            bot.send_message(
                message.chat.id,
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

def handle_creditors_list_pdf(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤"""
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF —Ñ–∞–π–ª
        file_name = message.document.file_name
        if not file_name or not file_name.lower().endswith('.pdf'):
            bot.reply_to(
                message, 
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        status_msg = bot.send_message(
            message.chat.id, 
            "‚è≥ –°–æ–∑–¥–∞—é —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤...\nüìÑ –ò–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF..."
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        file_info = bot.get_file(message.document.file_id)
        file_path = f"temp/{file_name}"
        os.makedirs("temp", exist_ok=True)
        
        with open(file_path, "wb") as f:
            f.write(bot.download_file(file_info.file_path))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=status_msg.message_id,
            text="‚è≥ –°–æ–∑–¥–∞—é —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤...\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤..."
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
        result = process_all_creditors_request(file_path, user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=status_msg.message_id,
            text="‚è≥ –°–æ–∑–¥–∞—é —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤...\nüìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –¥–æ–∫—É–º–µ–Ω—Ç..."
        )
        
        if result["status"] == "success":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PDF
            pdf_path = result["pdf_path"]
            creditors_count = result["creditors_count"]
            
            with open(pdf_path, 'rb') as pdf_file:
                bot.send_document(
                    chat_id=message.chat.id,
                    document=pdf_file,
                    caption=f"üìã **–°–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤**\n\n"
                           f"üë• –ù–∞–π–¥–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤: {creditors_count}\n"
                           f"üìÑ –ì–æ—Ç–æ–≤–æ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞—è–≤–ª–µ–Ω–∏—é –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ\n\n"
                           f"üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
                           f"1. –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç\n"
                           f"2. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –∫ –∑–∞—è–≤–ª–µ–Ω–∏—é –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ\n"
                           f"3. –ü–æ–¥–∞–π—Ç–µ –≤ —Å—É–¥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã",
                    visible_file_name="–°–ø–∏—Å–æ–∫_–∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤.pdf",
                    parse_mode='Markdown'
                )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
            markup.add(types.InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫", callback_data="creditors_list"))
            markup.add(types.InlineKeyboardButton("üßÆ –ë–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="bankruptcy_calculator"))
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(
                chat_id=message.chat.id,
                text="‚úÖ **–°–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤ –≥–æ—Ç–æ–≤!**\n\n"
                     "üìã PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞—Ö.\n"
                     "üéØ –≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞.",
                reply_markup=markup,
                parse_mode='Markdown'
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF
            try:
                os.remove(pdf_path)
            except:
                pass
                
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            error_message = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
            markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="creditors_list"))
            
            bot.send_message(
                chat_id=message.chat.id,
                text=f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞**\n\n"
                     f"üìù {error_message}\n\n"
                     f"üí° **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                     f"‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞\n"
                     f"‚Ä¢ –û—Ç—á–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π\n"
                     f"‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞—Ö",
                reply_markup=markup,
                parse_mode='Markdown'
            )
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(file_path)
        except:
            pass
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        try:
            bot.delete_message(chat_id=message.chat.id, message_id=status_msg.message_id)
        except:
            pass
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states.pop(user_id, None)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        print(f"[INFO] –°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        
        try:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_msg.message_id,
                text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except:
            bot.send_message(
                message.chat.id,
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

def handle_payment_receipt(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)"""
    user_id = message.from_user.id
    file_info = bot.get_file(message.document.file_id)
    file_name = message.document.file_name
    file_path = f"temp/{file_name}"
    os.makedirs("temp", exist_ok=True)
    
    with open(file_path, "wb") as f:
        f.write(bot.download_file(file_info.file_path))

    try:
        result = process_uploaded_file(file_path, user_id)
        
        if "message" in result:
            bot.send_message(message.chat.id, result["message"])

        if result["type"] == "payment_receipt":
            bot.send_message(
                message.chat.id,
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
                "‚è∞ –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.\n"
                "üìû –í–æ–ø—Ä–æ—Å—ã: +77027568921"
            )

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        try:
            os.remove(file_path)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    ADMIN_USER_IDS = [376068212, 827743984]
    caption = (
        f"üì© –ü–æ–ª—É—á–µ–Ω —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ:\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üìé –§–∞–π–ª: {file_name}"
    )

    for admin_id in ADMIN_USER_IDS:
        try:
            bot.forward_message(
                chat_id=admin_id, 
                from_chat_id=message.chat.id, 
                message_id=message.message_id
            )
            bot.send_message(admin_id, caption)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ main.py

@bot.message_handler(commands=['broadcast'])
def broadcast_message(message):
    """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    ADMIN_USER_IDS = [376068212, 827743984]
    if message.from_user.id not in ADMIN_USER_IDS:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split(' ', 1)
        if len(command_parts) < 2:
            bot.reply_to(
                message, 
                "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /broadcast [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]\n\n"
                "–ü—Ä–∏–º–µ—Ä: /broadcast üéâ –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã!"
            )
            return
            
        broadcast_text = command_parts[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        all_users = list(users_collection.find({}, {"user_id": 1, "first_name": 1}))
        
        if not all_users:
            bot.reply_to(message, "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        confirmation_text = (
            f"üì¢ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(all_users)}\n"
            f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{broadcast_text}\n\n"
            f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º?"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"confirm_broadcast"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback
        user_states[message.from_user.id] = {
            "type": "broadcast_confirmation",
            "text": broadcast_text,
            "users": all_users
        }
        
        bot.send_message(
            message.chat.id,
            confirmation_text,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        print(f"[ERROR broadcast] {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")

@bot.message_handler(commands=['grant_access'])
def grant_access(message):
    """–î–∞—ë—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    ADMIN_USER_IDS = [376068212, 827743984]
    if message.from_user.id not in ADMIN_USER_IDS:
        return

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É: /grant_access 1175419316 10
        parts = message.text.split()
        user_id = int(parts[1])
        limit = int(parts[2])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"access": True, "message_limit": limit}}
        )
        
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–∞–Ω–æ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
    except:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /grant_access user_id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")

@bot.message_handler(commands=['debug_user'])
def debug_user(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    ADMIN_USER_IDS = [376068212, 827743984]
    if message.from_user.id not in ADMIN_USER_IDS:
        return

    try:
        parts = message.text.split()
        user_id = int(parts[1])
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        user = users_collection.find_one({"user_id": user_id})
        
        if user:
            access = user.get("access", "–ù–ï–¢ –ü–û–õ–Ø")
            limit = user.get("message_limit", "–ù–ï–¢ –ü–û–õ–Ø")
            
            bot.reply_to(message, 
                f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:\n"
                f"access: {access}\n"
                f"message_limit: {limit}\n"
                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {user_states.get(user_id, '–ù–ï–¢')}"
            )
        else:
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –ù–ê–ô–î–ï–ù –≤ –±–∞–∑–µ!")
            
    except:
        bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /debug_user user_id")

@bot.message_handler(commands=['test_channel'])
def test_channel(message):
    ADMIN_IDS = [376068212, 827743984]
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    try:
        bot.send_message(CHANNEL_ID, "üì° –¢–µ—Å—Ç —Å–≤—è–∑–∏ —Å –∫–∞–Ω–∞–ª–æ–º: –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        bot.reply_to(message, "‚úÖ –°–≤—è–∑—å —Å –∫–∞–Ω–∞–ª–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç. –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_broadcast", "cancel_broadcast"])
def handle_broadcast_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    ADMIN_USER_IDS = [376068212, 827743984]
    if call.from_user.id not in ADMIN_USER_IDS:
        bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    user_state = user_states.get(call.from_user.id)
    if not user_state or user_state.get("type") != "broadcast_confirmation":
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return
    
    if call.data == "cancel_broadcast":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
        user_states.pop(call.from_user.id, None)
        bot.answer_callback_query(call.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_text = user_state["text"]
    all_users = user_state["users"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
    status_msg = bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å—Å—ã–ª–∫—É...\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\nüìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    sent_count = 0
    failed_count = 0
    
    for i, user in enumerate(all_users):
        try:
            user_id = user["user_id"]
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
            
            bot.send_message(
                chat_id=user_id,
                text=broadcast_text,
                reply_markup=markup,
                parse_mode='Markdown'
            )
            
            sent_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (i + 1) % 5 == 0:
                try:
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=status_msg.message_id,
                        text=f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å—Å—ã–ª–∫—É...\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\nüìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}"
                    )
                except:
                    pass
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram API
            time.sleep(0.1)
            
        except Exception as e:
            failed_count += 1
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.get('user_id', 'unknown')}: {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    final_report = (
        f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n\n"
        f"üìù **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n{broadcast_text}"
    )
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=status_msg.message_id,
        text=final_report,
        parse_mode='Markdown'
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states.pop(call.from_user.id, None)
    bot.answer_callback_query(call.id, f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")

# –°–õ–û–¢–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
admin_manager = AdminConsultationManager(bot,user_states)

@bot.callback_query_handler(func=lambda call: call.data == "admin_slots_today")
def handle_admin_slots_today(call):
    ADMIN_USER_IDS = [376068212, 827743984]
    if call.from_user.id not in ADMIN_USER_IDS:
        bot.send_message(call.message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    admin_manager.show_today_slots(call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_slot_details_"))
def handle_admin_slot_details(call):
    slot_id = call.data.replace("admin_slot_details_", "")
    admin_manager.show_slot_details(call, slot_id)

@bot.callback_query_handler(func=lambda call: call.data == "admin_slots_week")
def handle_admin_slots_week(call):
    manager = AdminConsultationManager(bot, user_states)
    manager.show_week_slots(call)
# –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query_handler, –¥–æ–±–∞–≤–∏–≤ –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è:

@bot.callback_query_handler(func=lambda call: call.data == "admin_all_slots")
def handle_admin_all_slots(call):
    manager = AdminConsultationManager(bot, user_states)
    manager.show_all_slots(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_cancel_slot_"))
def handle_admin_cancel_slot(call):
    slot_id = call.data.replace("admin_cancel_slot_", "")
    admin_manager.cancel_slot(call, slot_id)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    user_id = call.from_user.id
    # ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –ü–†–û–í–ï–†–ö–£ –í –ù–ê–ß–ê–õ–û:
    ADMIN_IDS = [376068212, 827743984]
    if user_id in ADMIN_IDS and call.data.startswith("admin_"):
        # print(f"[DEBUG] –ê–¥–º–∏–Ω—Å–∫–∏–π callback: {call.data}")
        # –ü–µ—Ä–µ–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ callback –≤ AdminConsultationManager
        from admin_consultation import AdminConsultationManager
        manager = AdminConsultationManager(bot, user_states)
        manager.handle_admin_callback(call)
        bot.answer_callback_query(call.id)
        return  # ‚Üê –í–´–•–û–î–ò–ú, –ù–ï –û–ß–ò–©–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï!
    if call.data == "lawyer_consultation":
        handle_lawyer_consultation(call)
    elif call.data == "check_credit_report":
        handle_credit_report_request(call)
    elif call.data == "bankruptcy_calculator":
        handle_bankruptcy_calculator(call)
    elif call.data == "creditors_list":  # ‚≠ê –ù–û–í–ê–Ø –°–¢–†–û–ö–ê
        handle_creditors_list_request(call)
    elif call.data == "free_consultation":
        handle_free_consultation_request(call)
    elif call.data.startswith("book_slot_"):
        handle_slot_booking(call)
    elif call.data == "my_consultations":
        handle_my_consultations(call)
    elif call.data.startswith("cancel_booking_"):
        handle_cancel_booking(call)
    elif call.data == "bot_info":
        handle_bot_info(call)
    elif call.data == "how_to_get_report":
        handle_how_to_get_report(call)
    elif call.data.startswith("admin_"):
        from admin_consultation import AdminConsultationManager
        manager = AdminConsultationManager(bot, user_states)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if call.data == "admin_send_reminders":
            manager.manual_send_reminders(call)
        else:
            manager.handle_admin_callback(call)
            
    elif call.data.startswith("confirm_day_"):
        booking_id = call.data.replace("confirm_day_", "")
        confirm_consultation_participation(call, booking_id, "day")
    elif call.data.startswith("cancel_day_"):
        booking_id = call.data.replace("cancel_day_", "")
        cancel_consultation_booking(call, booking_id, "not_available_day_before")
    elif call.data.startswith("confirm_hour_"):
        booking_id = call.data.replace("confirm_hour_", "")
        confirm_consultation_participation(call, booking_id, "hour")
    elif call.data.startswith("cancel_hour_"):
        booking_id = call.data.replace("cancel_hour_", "")
        cancel_consultation_booking(call, booking_id, "not_available_hour_before")
    elif call.data.startswith("pay_"):
        handle_payment_callback(call)
    elif call.data == "back_to_menu":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        main_menu_markup = create_main_menu()
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:",
            reply_markup=main_menu_markup
        )
    # –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò –°–¢–†–û–ö–ò:
    elif call.data in ["confirm_broadcast", "cancel_broadcast"]:
        handle_broadcast_callback(call)
    
    bot.answer_callback_query(call.id)

# –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö:
ANNOUNCEMENT_TEXT = """üéâ **–ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –í –ë–û–¢–ï!**

üÜï **–ß—Ç–æ –¥–æ–±–∞–≤–∏–ª–æ—Å—å:**

üìÑ **–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—É–¥–µ–±–Ω—ã—Ö –ø–∏—Å–µ–º**
‚Ä¢ –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –±–æ—Ç —Ç–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞ –∫–æ –≤—Å–µ–º –≤–∞—à–∏–º –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º
‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –ø–æ—á—Ç–µ
‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ!

üßÆ **–ë–∞–Ω–∫—Ä–æ—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä** 
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –≤–Ω–µ—Å—É–¥–µ–±–Ω–æ–≥–æ/—Å—É–¥–µ–±–Ω–æ–≥–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏

‚ú® **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
–ù–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é!

üí° –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏."""


def handle_lawyer_question(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ —é—Ä–∏—Å—Ç—É"""
    user_id = message.from_user.id
    text = message.text
    now = datetime.now(timezone.utc)

    user = users_collection.find_one({"user_id": user_id})

    if not user or not user.get("access", False):
        bot.send_message(
            message.chat.id, 
            "‚õî –î–æ—Å—Ç—É–ø –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /start –¥–ª—è –æ–ø–ª–∞—Ç—ã."
        )
        user_states.pop(user_id, None)
        return

    if user.get("message_limit", 0) <= 0:
        bot.send_message(
            message.chat.id, 
            "üìµ –õ–∏–º–∏—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: +77027568921"
        )
        user_states.pop(user_id, None)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
    ADMIN_USER_IDS = [376068212, 827743984]
    if user_id not in ADMIN_USER_IDS:
        today_start = datetime(now.year, now.month, now.day, tzinfo=timezone.utc)
        message_count = users_collection.count_documents({
            "user_id": user_id,
            "messages.timestamp": {"$gte": today_start.isoformat()}
        })

        if message_count >= 3:
            bot.send_message(message.chat.id, "üìµ –õ–∏–º–∏—Ç: –Ω–µ –±–æ–ª–µ–µ 3 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏.")
            return

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç–æ—Ç–µ (5 –º–∏–Ω—É—Ç)
    if user_id in user_last_access:
        last_time = user_last_access[user_id]
        if now - last_time < timedelta(minutes=5):
            bot.send_message(message.chat.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.")
            return
    user_last_access[user_id] = now

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    users_collection.update_one(
        {"user_id": user_id},
        {"$push": {
            "messages": {
                "text": text,
                "timestamp": datetime.utcnow().isoformat()
            }
        }}
    )

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
    try:
        status_msg = bot.send_message(message.chat.id, "‚åõ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")

        def progress_callback(stage_text):
            try:
                bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=status_msg.message_id,
                    text=stage_text
                )
            except Exception as e:
                print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–≤–∏–∂–∫–∞
        answer = query(text, progress_callback=progress_callback)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        users_collection.update_one(
            {"user_id": user_id},
            {"$push": {
                "answers": {
                    "text": answer,
                    "timestamp": datetime.now(timezone.utc).isoformat()
                }
            }}
        )
        
        # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç
        users_collection.update_one(
            {"user_id": user_id},
            {"$inc": {"message_limit": -1}}
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        remaining = user.get("message_limit", 1) - 1
        final_answer = f"{answer}\n\nüìù –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {remaining}"
        
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=status_msg.message_id,
            text=final_answer
        )
        
    except Exception as e:
        print(f"[ERROR] {e}")
        bot.send_message(
            message.chat.id, 
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π)"""
    user_id = message.from_user.id
    current_state = user_states.get(user_id)
    
    if current_state != "lawyer_consultation":
        bot.reply_to(
            message,
            "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏."
        )
        return
    
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...
    # (–º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
def handle_how_to_get_report(call):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    
    instruction_text = (
        "üìã **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç**\n\n"
        
        "üåê **–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç:** https://id.mkb.kz/#/auth\n\n"
        
        "‚ö†Ô∏è **–í–ê–ñ–ù–û:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ **–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç** —Å —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞!\n\n"
        
        "üìã **–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –ì–ö–ë: https://id.mkb.kz/#/auth\n"
        "2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        "3. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç'\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫: **—Ä—É—Å—Å–∫–∏–π** (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "5. –°–∫–∞—á–∞–π—Ç–µ –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF\n\n"
        
        "‚úÖ **–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç:**\n"
        "‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ—Ç–æ–º\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã –∏ –¥–æ–ª–≥–∏\n\n"
        
        "‚ùå **–ù–µ –ø–æ–¥—Ö–æ–¥—è—Ç:**\n"
        "‚Ä¢ –û—Ç—á–µ—Ç—ã —Å –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤\n"
        "‚Ä¢ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –≤–µ—Ä—Å–∏–∏ –æ—Ç—á–µ—Ç–æ–≤\n"
        "‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ —Ñ–æ—Ç–æ —ç–∫—Ä–∞–Ω–∞\n\n"
        
        "üõ°Ô∏è **–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞:** –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å –ì–ö–ë."
    )
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=instruction_text,
        reply_markup=markup,
        parse_mode='Markdown'
    )

# –ò –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É:
@bot.message_handler(commands=['get_channel_id'])
def get_channel_id(message):
    ADMIN_IDS = [376068212, 827743984]  # –≤–∞—à–∏ ID
    if message.from_user.id not in ADMIN_IDS:
        return
    
    bot.reply_to(message, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
@bot.message_handler(content_types=['text'], func=lambda message: message.forward_from_chat is not None)
def handle_forwarded(message):
    ADMIN_IDS = [376068212, 827743984]
    if message.from_user.id not in ADMIN_IDS:
        return
        
    channel_id = message.forward_from_chat.id
    bot.reply_to(message, f"ID –∫–∞–Ω–∞–ª–∞: {channel_id}")

# @bot.message_handler(func=lambda message: True)
# def handle_all_messages(message):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
#     user_id = message.from_user.id
#     current_state = user_states.get(user_id)
    
#     if current_state == "lawyer_consultation":
#         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ —é—Ä–∏—Å—Ç—É
#         handle_lawyer_question(message)
#     elif current_state == "waiting_credit_report":
#         # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
#         bot.reply_to(
#             message,
#             "üìä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.\n"
#             "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ."
#         )
#     else:
#         # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
#         markup = create_main_menu()
#         bot.send_message(
#             message.chat.id,
#             "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
#             reply_markup=markup
#         )

# –ó–ê–ú–ï–ù–ò–¢–¨ –§–£–ù–ö–¶–ò–Æ handle_all_messages –Ω–∞ —ç—Ç—É:

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    user_id = message.from_user.id
    # print(f"[TRACE] handle_all_messages –≤—ã–∑–≤–∞–Ω –¥–ª—è {user_id}")
    # print(f"[TRACE] id(user_states): {id(user_states)}") 
    current_state = user_states.get(user_id)
    # print(f"[DEBUG] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    # üîß –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    # print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ = '{current_state}'")
    # print(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ: '{message.text}'")
    
    if current_state == "lawyer_consultation":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ —é—Ä–∏—Å—Ç—É (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
        handle_lawyer_question(message)
    elif current_state in ["waiting_credit_report", "waiting_bankruptcy_report", "waiting_creditors_list"]:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        file_type_map = {
            "waiting_credit_report": "–∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞",
            "waiting_bankruptcy_report": "–æ—Ç—á–µ—Ç–∞ –¥–ª—è –±–∞–Ω–∫—Ä–æ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞", 
            "waiting_creditors_list": "–æ—Ç—á–µ—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤"
        }
        
        file_type = file_type_map.get(current_state, "—Ñ–∞–π–ª–∞")
        
        bot.reply_to(
            message,
            f"üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª {file_type}.\n"
            "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
            "üí° –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —É—Å–ª—É–≥—É."
        )
    elif current_state and current_state.startswith("admin_messaging_"):
        # üÜï –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ë–õ–û–ö
        # –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        target_user_id = int(current_state.replace("admin_messaging_", ""))
        admin_message = message.text
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(
                chat_id=target_user_id,
                text=f"üì© **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{admin_message}",
                parse_mode='Markdown'
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            bot.reply_to(message, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
            
        except Exception as e:
            # –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        user_states.pop(user_id, None)
        return
    else:
        # üÜï –ù–û–í–ê–Ø –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê
        smart_handler.handle_message(message)
        print(f"[SMART] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–º–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º: {message.text[:30]}...")

@bot.message_handler(commands=['channel_info'])
def channel_info(message):
    ADMIN_IDS = [376068212, 827743984]
    if message.from_user.id not in ADMIN_IDS:
        return
    
    bot.reply_to(message, 
        "üìã **–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–Ω–∞–ª–∞:**\n\n"
        "**–í–∞—Ä–∏–∞–Ω—Ç 1:** –°–¥–µ–ª–∞–π—Ç–µ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–º:\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ ‚Üí –¢–∏–ø –∫–∞–Ω–∞–ª–∞ ‚Üí –ü—É–±–ª–∏—á–Ω—ã–π\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username (–Ω–∞–ø—Ä–∏–º–µ—Ä @mychannel)\n"
        "‚Ä¢ ID –±—É–¥–µ—Ç: @mychannel\n\n"
        "**–í–∞—Ä–∏–∞–Ω—Ç 2:** –í—Ä–µ–º–µ–Ω–Ω–æ –ø—É–±–ª–∏—á–Ω—ã–π:\n"
        "1. –°–¥–µ–ª–∞–π—Ç–µ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–º\n"
        "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –º–Ω–µ\n"
        "3. –í–µ—Ä–Ω–∏—Ç–µ –∫–∞–Ω–∞–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π\n\n"
        "**–í–∞—Ä–∏–∞–Ω—Ç 3:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ –∫–∞–Ω–∞–ª —Å –±–æ—Ç–æ–º",
        parse_mode='Markdown'
    )
@bot.message_handler(func=lambda message: message.chat.type in ['channel', 'supergroup'])
def handle_channel_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ"""
    ADMIN_IDS = [376068212, 827743984]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ
    try:
        for admin_id in ADMIN_IDS:
            chat_member = bot.get_chat_member(message.chat.id, admin_id)
            if chat_member.status in ['creator', 'administrator', 'member']:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –∫–∞–Ω–∞–ª–∞ –∞–¥–º–∏–Ω—É –≤ –ª–∏—á–∫—É
                bot.send_message(
                    admin_id, 
                    f"üì¢ ID –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã: `{message.chat.id}`\n"
                    f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title}\n"
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text[:50]}...",
                    parse_mode='Markdown'
                )
                break
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
     # üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    notification_scheduler.start_scheduler()
    print("[INFO] üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")

    while True:
        try:
            bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            print(f"[ERROR] Polling crashed: {e}")
            time.sleep(5)

# –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π @bot.message_handler(func=lambda message: True)

