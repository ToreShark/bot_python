from pymongo import MongoClient
import os
from dotenv import load_dotenv
from datetime import datetime
from telebot import types

load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ (–∫–∞–∫ –≤ main.py)
MONGO_URI = os.getenv("MONGO_URI")
client = MongoClient(MONGO_URI)
db = client['telegram_bot']

# –¢–µ –∂–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —á—Ç–æ —Å–æ–∑–¥–∞–≤–∞–ª–∏
courses_collection = db['courses']
modules_collection = db['modules']
lessons_collection = db['lessons']
user_progress_collection = db['user_progress']
users_collection = db['users']  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞—Ä–∏—Ñ–∞

class VideoCourseManager:
    def __init__(self, bot):
        self.bot = bot
    
    # –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π –∫–ª–∞—Å—Å - –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ç–æ–¥—ã –ø–æ –æ–¥–Ω–æ–º—É
    def check_course_access(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å–∞–º (—Ç–∞—Ä–∏—Ñ 15000‚Ç∏)"""
        try:
            user = users_collection.find_one({"user_id": user_id})
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
            if not user:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –ò –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            has_access = user.get("access", False)
            message_limit = user.get("message_limit", 0)
            
            # –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å–∞–º —Ç–æ–ª—å–∫–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–∏–º–∏—Ç–æ–º >= 30 —Å–æ–æ–±—â–µ–Ω–∏–π
            # (—ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–∞—Ä–∏—Ñ 15000‚Ç∏)
            return has_access and message_limit >= 30
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
            return False
        
    def get_available_courses(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤"""
        try:
            courses = list(courses_collection.find(
                {"is_active": True}
            ).sort("created_at", 1))
            
            return courses
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
            return []
        
    def get_course_modules(self, course_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥—É–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞"""
        try:
            modules = list(modules_collection.find(
                {"course_id": course_id}
            ).sort("order", 1))
            
            return modules
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π: {e}")
            return []

    def get_module_lessons(self, module_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
        try:
            lessons = list(lessons_collection.find(
                {"module_id": module_id}
            ).sort("order", 1))
            
            return lessons
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤: {e}")
            return []

    def get_lesson_by_id(self, lesson_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–∫ –ø–æ ID"""
        try:
            lesson = lessons_collection.find_one({"lesson_id": lesson_id})
            return lesson
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–∞: {e}")
        return None
    
    def get_user_progress(self, user_id, course_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫—É—Ä—Å—É"""
        try:
            progress = user_progress_collection.find_one({
                "user_id": user_id,
                "course_id": course_id
            })
            
            # –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π
            if not progress:
                progress = {
                    "user_id": user_id,
                    "course_id": course_id,
                    "completed_lessons": [],
                    "current_lesson": None,
                    "progress_percent": 0,
                    "last_accessed": datetime.utcnow()
                }
                user_progress_collection.insert_one(progress)
            
            return progress
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return None

    def mark_lesson_completed(self, user_id, lesson_id):
        """–û—Ç–º–µ—á–∞–µ—Ç —É—Ä–æ–∫ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∫—É—Ä—Å —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
            lesson = self.get_lesson_by_id(lesson_id)
            if not lesson:
                return False
            
            module = modules_collection.find_one({"module_id": lesson["module_id"]})
            if not module:
                return False
            
            course_id = module["course_id"]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Å—Ç—Å—è –µ—Å–ª–∏ –Ω–µ—Ç)
            progress = self.get_user_progress(user_id, course_id)
            
            # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤ –¥–æ–±–∞–≤–∏—Ç—Å—è)
            current_completed = len(progress.get("completed_lessons", []))
            if lesson_id not in progress.get("completed_lessons", []):
                current_completed += 1  # –î–æ–±–∞–≤–∏—Ç—Å—è –Ω–æ–≤—ã–π —É—Ä–æ–∫
            
            course = courses_collection.find_one({"course_id": course_id})
            total_lessons = course.get("total_lessons", 1)
            progress_percent = round((current_completed / total_lessons) * 100)
            
            # ‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï —Å $addToSet
            user_progress_collection.update_one(
                {"user_id": user_id, "course_id": course_id},
                {
                    "$addToSet": {"completed_lessons": lesson_id},  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–±–µ–≥–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    "$set": {
                        "current_lesson": lesson_id,
                        "progress_percent": progress_percent,
                        "last_accessed": datetime.utcnow(),
                    },
                },
            )
            
            return True
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return False
        
    def create_courses_menu(self, user_id):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—É—Ä—Å–æ–≤"""
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        courses = self.get_available_courses()
        
        for course in courses:
            course_id = course["course_id"]
            title = course["title"]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            progress = self.get_user_progress(user_id, course_id)
            progress_percent = progress.get("progress_percent", 0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            if progress_percent > 0:
                button_text = f"üìö {title} ({progress_percent}%)"
            else:
                button_text = f"üìö {title}"
            
            markup.add(types.InlineKeyboardButton(
                button_text, 
                callback_data=f"course_{course_id}"
            ))
        
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        
        return markup

    def create_modules_menu(self, course_id, user_id):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –º–æ–¥—É–ª–µ–π –∫—É—Ä—Å–∞"""
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        modules = self.get_course_modules(course_id)
        progress = self.get_user_progress(user_id, course_id)
        completed_lessons = progress.get("completed_lessons", [])
        
        for module in modules:
            module_id = module["module_id"]
            title = module["title"]
            
            # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ
            module_lessons = self.get_module_lessons(module_id)
            completed_in_module = len([l for l in module_lessons if l["lesson_id"] in completed_lessons])
            total_in_module = len(module_lessons)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            if completed_in_module > 0:
                button_text = f"üìñ {title} ({completed_in_module}/{total_in_module})"
            else:
                button_text = f"üìñ {title}"
            
            markup.add(types.InlineKeyboardButton(
                button_text,
                callback_data=f"module_{module_id}"
            ))
        
        markup.add(types.InlineKeyboardButton("üîô –ö –∫—É—Ä—Å–∞–º", callback_data="video_courses"))
        
        return markup
    pass

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç
if __name__ == "__main__":
    manager = VideoCourseManager(None)
    
    print("=== –†–ê–°–®–ò–†–ï–ù–ù–´–ô –¢–ï–°–¢ ===")
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å—ã
    courses = manager.get_available_courses()
    print(f"üìö –ö—É—Ä—Å–æ–≤: {len(courses)}")
    
    if courses:
        first_course = courses[0]
        course_id = first_course["course_id"]
        print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å: {first_course['title']}")
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        modules = manager.get_course_modules(course_id)
        print(f"üìñ –ú–æ–¥—É–ª–µ–π –≤ –∫—É—Ä—Å–µ: {len(modules)}")
        
        if modules:
            first_module = modules[0]
            module_id = first_module["module_id"]
            print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å: {first_module['title']}")
            
            # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏
            lessons = manager.get_module_lessons(module_id)
            print(f"üé• –£—Ä–æ–∫–æ–≤ –≤ –º–æ–¥—É–ª–µ: {len(lessons)}")
            
            if lessons:
                first_lesson = lessons[0]
                lesson_id = first_lesson["lesson_id"]
                print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫: {first_lesson['title']}")
                print(f"   –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {first_lesson['video_url']}")
                
                # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                user_id = 376068212  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô ID
                progress = manager.get_user_progress(user_id, course_id)
                print(f"\nüë§ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
                print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {len(progress.get('completed_lessons', []))}")
                print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç: {progress.get('progress_percent', 0)}%")
                
                # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–º–µ—Ç–∫—É —É—Ä–æ–∫–∞
                print(f"\n‚úÖ –û—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π...")
                success = manager.mark_lesson_completed(user_id, lesson_id)
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
                
                # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                updated_progress = manager.get_user_progress(user_id, course_id)
                print(f"   –ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {updated_progress.get('progress_percent', 0)}%")