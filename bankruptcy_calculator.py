import logging
import os
from typing import Dict, List, Tuple
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
DEBUG_MODE = os.getenv('DEBUG', 'False').lower() == 'true'

if DEBUG_MODE:
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)
else:
    logging.basicConfig(level=logging.CRITICAL)
    logger = logging.getLogger(__name__)
    logger.disabled = True

class BankruptcyCalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞"""
    
    def __init__(self):
        # –ú–†–ü –Ω–∞ 2025 –≥–æ–¥ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ = 3932 —Ç–µ–Ω–≥–µ
        self.MRP_2025 = 3932
        # –ü–æ—Ä–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –¥–ª—è –≤–Ω–µ—Å—É–¥–µ–±–Ω–æ–≥–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞: 1600 –ú–†–ü
        self.THRESHOLD_AMOUNT = 1600 * self.MRP_2025  # 6,291,200 —Ç–µ–Ω–≥–µ
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –¥–ª—è –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞: 365 –¥–Ω–µ–π (12 –º–µ—Å—è—Ü–µ–≤)
        self.MIN_OVERDUE_DAYS = 365
    
    def analyze_bankruptcy_eligibility(self, parsed_data: Dict) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
        
        Args:
            parsed_data: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        
        Returns:
            Dict —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            total_debt = parsed_data.get('total_debt', 0.0)
            obligations = parsed_data.get('obligations', [])
            collaterals = parsed_data.get('collaterals', [])
            personal_info = parsed_data.get('personal_info', {})

            # üîÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á—ë—Ç, –µ—Å–ª–∏ total_debt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ä–∞–≤–µ–Ω 0
            if total_debt == 0 and obligations:
                total_debt = sum(o.get('balance', 0) for o in obligations)
                logger.warning("üí° total_debt —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Å—É–º–º–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤")
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞: –¥–æ–ª–≥={total_debt}, –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤={len(obligations)}, –∑–∞–ª–æ–≥–æ–≤={len(collaterals)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É
            overdue_analysis = self._analyze_overdue_obligations(obligations)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ª–æ–≥–∏
            collateral_analysis = self._analyze_collaterals(collaterals)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É
            recommendation = self._determine_procedure(
                total_debt=total_debt,
                overdue_analysis=overdue_analysis,
                collateral_analysis=collateral_analysis
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            detailed_analysis = self._create_detailed_analysis(
                total_debt=total_debt,
                obligations=obligations,
                collaterals=collaterals,
                overdue_analysis=overdue_analysis,
                collateral_analysis=collateral_analysis,
                recommendation=recommendation,
                personal_info=personal_info
            )
            
            return detailed_analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞: {e}")
            return {
                "error": True,
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"
            }
    
    def _analyze_overdue_obligations(self, obligations: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
        
        total_overdue_creditors = 0
        max_overdue_days = 0
        min_overdue_days = float('inf')
        zero_days_creditors = []
        overdue_creditors = []
        
        for obligation in obligations:
            overdue_days = obligation.get('overdue_days', 0)
            creditor = obligation.get('creditor', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            balance = obligation.get('balance', 0)
            
            if overdue_days > 0:
                total_overdue_creditors += 1
                max_overdue_days = max(max_overdue_days, overdue_days)
                min_overdue_days = min(min_overdue_days, overdue_days)
                overdue_creditors.append({
                    'creditor': creditor,
                    'days': overdue_days,
                    'amount': balance
                })
            elif overdue_days == 0 and balance > 0:
                zero_days_creditors.append({
                    'creditor': creditor,
                    'amount': balance
                })
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º min_overdue_days –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø—Ä–æ—Å—Ä–æ—á–µ–∫
        if min_overdue_days == float('inf'):
            min_overdue_days = 0
        
        meets_overdue_requirement = max_overdue_days > self.MIN_OVERDUE_DAYS
        
        return {
            'total_overdue_creditors': total_overdue_creditors,
            'max_overdue_days': max_overdue_days,
            'min_overdue_days': min_overdue_days,
            'meets_overdue_requirement': meets_overdue_requirement,
            'zero_days_creditors': zero_days_creditors,
            'overdue_creditors': overdue_creditors
        }
    
    def _analyze_collaterals(self, collaterals: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ª–æ–≥–æ–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ª–æ–º–±–∞—Ä–¥–æ–≤"""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ª–æ–≥–∏ - –∏—Å–∫–ª—é—á–∞–µ–º –ª–æ–º–±–∞—Ä–¥—ã –∏ –º–µ–ª–∫–∏–µ –∑–∞–ª–æ–≥–∏
        significant_collaterals = []
        excluded_collaterals = []
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ª–æ–≥–∞ –¥–ª—è —É—á–µ—Ç–∞ –≤ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ (1 –º–ª–Ω —Ç–µ–Ω–≥–µ)
        MIN_COLLATERAL_VALUE = 1000000
        
        for collateral in collaterals:
            creditor_name = collateral.get('creditor', '').lower()
            collateral_value = collateral.get('market_value', 0)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–º–±–∞—Ä–¥–æ–º –∏–ª–∏ –º–µ–ª–∫–∏–º –∑–∞–ª–æ–≥–æ–º
            is_pawnshop = any(keyword in creditor_name for keyword in [
                '–ª–æ–º–±–∞—Ä–¥', 'lombard', 'pawnshop', '–∑–∞–ª–æ–≥', 
                '–∑–∞–ª–æ–∂–∏', '–∑–æ–ª–æ—Ç–æ', '—é–≤–µ–ª–∏'
            ])
            
            is_small_collateral = collateral_value < MIN_COLLATERAL_VALUE
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –ª–æ–º–±–∞—Ä–¥—ã –∏ –º–µ–ª–∫–∏–µ –∑–∞–ª–æ–≥–∏
            if is_pawnshop or is_small_collateral:
                excluded_collaterals.append({
                    'creditor': collateral.get('creditor', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'),
                    'type': collateral.get('collateral_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø'),
                    'value': collateral_value,
                    'exclusion_reason': '–ª–æ–º–±–∞—Ä–¥' if is_pawnshop else '–º–µ–ª–∫–∏–π –∑–∞–ª–æ–≥'
                })
            else:
                significant_collaterals.append({
                    'creditor': collateral.get('creditor', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'),
                    'type': collateral.get('collateral_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø'),
                    'value': collateral_value
                })
        
        # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∑–∞–ª–æ–≥–∏
        has_significant_collaterals = len(significant_collaterals) > 0
        total_significant_value = sum(c['value'] for c in significant_collaterals)
        total_excluded_value = sum(c['value'] for c in excluded_collaterals)
        
        logger.info(f"–ó–∞–ª–æ–≥–∏: –∑–Ω–∞—á–∏–º—ã—Ö={len(significant_collaterals)}, –∏—Å–∫–ª—é—á–µ–Ω–æ={len(excluded_collaterals)}")
        logger.info(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: –∑–Ω–∞—á–∏–º—ã—Ö={total_significant_value:,.0f}, –∏—Å–∫–ª—é—á–µ–Ω–æ={total_excluded_value:,.0f}")
        
        return {
            'has_collaterals': has_significant_collaterals,  # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∑–∞–ª–æ–≥–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
            'total_value': total_significant_value,
            'count': len(significant_collaterals),
            'details': significant_collaterals,
            'excluded_collaterals': excluded_collaterals,  # –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            'excluded_count': len(excluded_collaterals),
            'excluded_value': total_excluded_value
        }
    
    def _determine_procedure(self, total_debt: float, overdue_analysis: Dict, collateral_analysis: Dict) -> Dict:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞"""
        
        debt_below_threshold = total_debt < self.THRESHOLD_AMOUNT
        meets_overdue_requirement = overdue_analysis['meets_overdue_requirement']
        has_collaterals = collateral_analysis['has_collaterals']
        has_zero_days_creditors = len(overdue_analysis['zero_days_creditors']) > 0
        
        logger.info(f"–ö—Ä–∏—Ç–µ—Ä–∏–∏: –¥–æ–ª–≥<–ø–æ—Ä–æ–≥–∞={debt_below_threshold}, –ø—Ä–æ—Å—Ä–æ—á–∫–∞>365={meets_overdue_requirement}, –∑–∞–ª–æ–≥–∏={has_collaterals}")
        
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
        if not meets_overdue_requirement:
            # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∞ –º–µ–Ω—å—à–µ 365 –¥–Ω–µ–π
            return {
                'procedure': 'restoration',
                'title': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
                'reason': 'insufficient_overdue',
                'description': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å—Ä–æ—á–∫–∞ –º–µ–Ω–µ–µ 365 –¥–Ω–µ–π'
            }
        
        elif debt_below_threshold and not has_collaterals:
            # –í–Ω–µ—Å—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
            return {
                'procedure': 'extrajudicial',
                'title': '–í–Ω–µ—Å—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ',
                'reason': 'meets_extrajudicial_criteria',
                'description': '–î–æ–ª–≥ –º–µ–Ω–µ–µ 6,291,200 ‚Ç∏, –ø—Ä–æ—Å—Ä–æ—á–∫–∞ –±–æ–ª–µ–µ 365 –¥–Ω–µ–π, –Ω–µ—Ç –∑–∞–ª–æ–≥–æ–≤'
            }
        
        else:
            # –°—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
            reasons = []
            if not debt_below_threshold:
                reasons.append('–¥–æ–ª–≥ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 6,291,200 ‚Ç∏')
            if has_collaterals:
                reasons.append('–∏–º–µ–µ—Ç—Å—è –∑–∞–ª–æ–≥–æ–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ')
            
            return {
                'procedure': 'judicial',
                'title': '–°—É–¥–µ–±–Ω–æ–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ',
                'reason': 'requires_judicial',
                'description': f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞: {', '.join(reasons)}"
            }
    
    def _create_detailed_analysis(self, total_debt: float, obligations: List[Dict], 
                                collaterals: List[Dict], overdue_analysis: Dict, 
                                collateral_analysis: Dict, recommendation: Dict,
                                personal_info: Dict) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        
        return {
            'personal_info': personal_info,
            'financial_summary': {
                'total_debt': total_debt,
                'threshold_amount': self.THRESHOLD_AMOUNT,
                'debt_below_threshold': total_debt < self.THRESHOLD_AMOUNT,
                'total_obligations': len(obligations)
            },
            'overdue_analysis': overdue_analysis,
            'collateral_analysis': collateral_analysis,
            'recommendation': recommendation,
            'detailed_conditions': self._check_all_conditions(total_debt, overdue_analysis, collateral_analysis),
            'next_steps': self._generate_next_steps(recommendation, overdue_analysis),
            'warnings': self._generate_warnings(overdue_analysis, collateral_analysis)
        }
    
    def _check_all_conditions(self, total_debt: float, overdue_analysis: Dict, collateral_analysis: Dict) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä"""
        
        return {
            'extrajudicial': {
                'debt_requirement': {
                    'met': total_debt < self.THRESHOLD_AMOUNT,
                    'description': f'–î–æ–ª–≥ –º–µ–Ω–µ–µ {self.THRESHOLD_AMOUNT:,.0f} ‚Ç∏',
                    'current_value': total_debt
                },
                'overdue_requirement': {
                    'met': overdue_analysis['meets_overdue_requirement'],
                    'description': '–ü—Ä–æ—Å—Ä–æ—á–∫–∞ –±–æ–ª–µ–µ 365 –¥–Ω–µ–π',
                    'current_value': overdue_analysis['max_overdue_days']
                },
                'collateral_requirement': {
                    'met': not collateral_analysis['has_collaterals'],
                    'description': '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–ª–æ–≥–æ–≤–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞',
                    'current_value': collateral_analysis['count']
                }
            },
            'judicial': {
                'debt_or_collateral': {
                    'met': total_debt >= self.THRESHOLD_AMOUNT or collateral_analysis['has_collaterals'],
                    'description': '–î–æ–ª–≥ —Å–≤—ã—à–µ 6,291,200 ‚Ç∏ –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ª–æ–≥–æ–≤',
                    'current_debt': total_debt,
                    'has_collaterals': collateral_analysis['has_collaterals']
                },
                'overdue_requirement': {
                    'met': overdue_analysis['meets_overdue_requirement'],
                    'description': '–ü—Ä–æ—Å—Ä–æ—á–∫–∞ –±–æ–ª–µ–µ 365 –¥–Ω–µ–π',
                    'current_value': overdue_analysis['max_overdue_days']
                }
            },
            'restoration': {
                'applicable_when': '–ü—Ä–æ—Å—Ä–æ—á–∫–∞ –º–µ–Ω–µ–µ 365 –¥–Ω–µ–π –∏–ª–∏ –µ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥'
            }
        }
    
    def _generate_next_steps(self, recommendation: Dict, overdue_analysis: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º"""
        
        steps = []
        procedure = recommendation['procedure']
        
        if procedure == 'extrajudicial':
            steps = [
                "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º–∏",
                "2. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥–∞—á–∏ –≤ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω",
                "3. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –≤–Ω–µ—Å—É–¥–µ–±–Ω–æ–º –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ",
                "4. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è (–¥–æ 6 –º–µ—Å—è—Ü–µ–≤)"
            ]
        
        elif procedure == 'judicial':
            steps = [
                "1. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º–∏",
                "2. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "3. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å—É–¥ –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ",
                "4. –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å—É–¥–µ–±–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"
            ]
        
        else:  # restoration
            steps = [
                "1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤",
                "2. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–ª–∞–Ω —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–≥–∞",
                "3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è",
                "4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞–π—Ç–µ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
            ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å –Ω—É–ª–µ–≤–æ–π –ø—Ä–æ—Å—Ä–æ—á–∫–æ–π
        if overdue_analysis['zero_days_creditors']:
            steps.append("‚ö†Ô∏è –£—Ç–æ—á–Ω–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ —É –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏")
        
        return steps
    
    def _generate_warnings(self, overdue_analysis: Dict, collateral_analysis: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–º–µ—á–∞–Ω–∏—è"""
        
        warnings = []
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞—Ö —Å –Ω—É–ª–µ–≤–æ–π –ø—Ä–æ—Å—Ä–æ—á–∫–æ–π
        if overdue_analysis['zero_days_creditors']:
            creditor_names = [c['creditor'] for c in overdue_analysis['zero_days_creditors']]
            warnings.append(
                f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–µ–¥–∏—Ç–æ—Ä—ã –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: {', '.join(creditor_names)}. "
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏."
            )
        
        # –í —Ñ—É–Ω–∫—Ü–∏–∏ _generate_warnings –∑–∞–º–µ–Ω–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å –∑–∞–ª–æ–≥–∞–º–∏ –Ω–∞:

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏–º—ã—Ö –∑–∞–ª–æ–≥–∞—Ö
        if collateral_analysis['has_collaterals']:
            warnings.append(
                f"üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {collateral_analysis['count']} –∑–Ω–∞—á–∏–º—ã—Ö –∑–∞–ª–æ–≥–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É "
                f"{collateral_analysis['total_value']:,.2f} ‚Ç∏. –ü—Ä–∏ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ –∑–∞–ª–æ–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã."
            )

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∑–∞–ª–æ–≥–∞—Ö
        excluded_count = collateral_analysis.get('excluded_count', 0)
        if excluded_count > 0:
            warnings.append(
                f"üìù –ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ {excluded_count} –º–µ–ª–∫–∏—Ö –∑–∞–ª–æ–≥–æ–≤/–ª–æ–º–±–∞—Ä–¥–æ–≤ –Ω–∞ —Å—É–º–º—É "
                f"{collateral_analysis.get('excluded_value', 0):,.2f} ‚Ç∏ (–Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É)."
            )
        
        # –û–±—â–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings.append(
            "üìã –î–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–æ—Å–∏—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. "
            "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∞–º–∏."
        )
        
        return warnings

def format_bankruptcy_analysis(analysis: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if analysis.get('error'):
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞: {analysis.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    result = "üßÆ **–ë–ê–ù–ö–†–û–¢–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    recommendation = analysis['recommendation']
    procedure_icons = {
        'extrajudicial': '‚öñÔ∏è',
        'judicial': 'üèõÔ∏è',
        'restoration': 'üîÑ'
    }
    
    icon = procedure_icons.get(recommendation['procedure'], 'üìã')
    result += f"{icon} **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: {recommendation['title'].upper()}**\n"
    result += f"üìÑ –û—Å–Ω–æ–≤–∞–Ω–∏–µ: {recommendation['description']}\n\n"
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    financial = analysis['financial_summary']
    result += "üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
    result += f"‚Äî –û–±—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {financial['total_debt']:,.2f} ‚Ç∏\n"
    result += f"‚Äî –ü–æ—Ä–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ (1600 –ú–†–ü): {financial['threshold_amount']:,.2f} ‚Ç∏\n"
    result += f"‚Äî –í—Å–µ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤: {financial['total_obligations']}\n\n"
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
    overdue = analysis['overdue_analysis']
    result += "‚è∞ **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ä–æ—á–∫–∏:**\n"
    result += f"‚Äî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å—Ä–æ—á–∫–∞: {overdue['max_overdue_days']} –¥–Ω–µ–π\n"
    result += f"‚Äî –ö—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤ —Å –ø—Ä–æ—Å—Ä–æ—á–∫–æ–π: {overdue['total_overdue_creditors']}\n"
    
    if overdue['zero_days_creditors']:
        result += f"‚Äî ‚ö†Ô∏è –ö—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–∫–∏: {len(overdue['zero_days_creditors'])}\n"
    
    result += f"‚Äî –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ (>365 –¥–Ω–µ–π): {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' if overdue['meets_overdue_requirement'] else '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞–ª–æ–≥–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤ —Ñ—É–Ω–∫—Ü–∏–∏ format_bankruptcy_analysis)
    collateral = analysis['collateral_analysis']

    if collateral['has_collaterals'] or collateral.get('excluded_count', 0) > 0:
        result += "üîí **–ó–∞–ª–æ–≥–æ–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ:**\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–∏–º—ã–µ –∑–∞–ª–æ–≥–∏ (–≤–ª–∏—è—é—â–∏–µ –Ω–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ)
        if collateral['has_collaterals']:
            result += f"‚Äî –ó–Ω–∞—á–∏–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {collateral['count']}\n"
            result += f"‚Äî –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {collateral['total_value']:,.2f} ‚Ç∏\n"
            for detail in collateral['details']:
                result += f"  ‚Ä¢ {detail['creditor']}: {detail['type']} ({detail['value']:,.2f} ‚Ç∏)\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∑–∞–ª–æ–≥–∏ (–Ω–µ –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ)
        excluded = collateral.get('excluded_collaterals', [])
        if excluded:
            result += f"\nüìù –ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ ({collateral['excluded_count']} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ {collateral['excluded_value']:,.2f} ‚Ç∏):\n"
            for exc in excluded[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                reason = "üè™ –ª–æ–º–±–∞—Ä–¥" if exc['exclusion_reason'] == '–ª–æ–º–±–∞—Ä–¥' else "üí∞ < 1 –º–ª–Ω ‚Ç∏"
                result += f"  ‚Ä¢ {exc['creditor']}: {exc['type']} ({reason})\n"
            
            if len(excluded) > 3:
                result += f"  ‚Ä¢ ... –∏ –µ—â–µ {len(excluded) - 3} –æ–±—ä–µ–∫—Ç–æ–≤\n"
            
            result += f"\nüí° *–ú–µ–ª–∫–∏–µ –∑–∞–ª–æ–≥–∏ –∏ –ª–æ–º–±–∞—Ä–¥—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤—ã–±–æ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞*\n"
        
        result += "\n"
    else:
        result += "üîí **–ó–∞–ª–æ–≥–æ–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ:** –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π
    conditions = analysis['detailed_conditions']
    if recommendation['procedure'] in ['extrajudicial', 'judicial']:
        result += f"üìã **–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è {recommendation['title'].lower()}:**\n"
        
        if recommendation['procedure'] == 'extrajudicial':
            ext_conditions = conditions['extrajudicial']
            result += f"‚Äî –†–∞–∑–º–µ—Ä –¥–æ–ª–≥–∞: {'‚úÖ' if ext_conditions['debt_requirement']['met'] else '‚ùå'} "
            result += f"({ext_conditions['debt_requirement']['current_value']:,.2f} ‚Ç∏)\n"
            
            result += f"‚Äî –°—Ä–æ–∫ –ø—Ä–æ—Å—Ä–æ—á–∫–∏: {'‚úÖ' if ext_conditions['overdue_requirement']['met'] else '‚ùå'} "
            result += f"({ext_conditions['overdue_requirement']['current_value']} –¥–Ω–µ–π)\n"
            
            result += f"‚Äî –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–ª–æ–≥–æ–≤: {'‚úÖ' if ext_conditions['collateral_requirement']['met'] else '‚ùå'} "
            result += f"({ext_conditions['collateral_requirement']['current_value']} –æ–±—ä–µ–∫—Ç–æ–≤)\n"
        
        else:  # judicial
            jud_conditions = conditions['judicial']
            result += f"‚Äî –î–æ–ª–≥ –∏–ª–∏ –∑–∞–ª–æ–≥–∏: {'‚úÖ' if jud_conditions['debt_or_collateral']['met'] else '‚ùå'}\n"
            result += f"‚Äî –°—Ä–æ–∫ –ø—Ä–æ—Å—Ä–æ—á–∫–∏: {'‚úÖ' if jud_conditions['overdue_requirement']['met'] else '‚ùå'} "
            result += f"({jud_conditions['overdue_requirement']['current_value']} –¥–Ω–µ–π)\n"
        
        result += "\n"
    
    # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    result += "üìù **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
    for step in analysis['next_steps']:
        result += f"{step}\n"
    result += "\n"
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if analysis['warnings']:
        result += "‚ö†Ô∏è **–í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:**\n"
        for warning in analysis['warnings']:
            result += f"{warning}\n"
    
    return result

def analyze_credit_report_for_bankruptcy(parsed_data: Dict) -> str:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
    
    Args:
        parsed_data: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    
    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    calculator = BankruptcyCalculator()
    analysis = calculator.analyze_bankruptcy_eligibility(parsed_data)
    return format_bankruptcy_analysis(analysis)

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ document_processor
def process_credit_report_with_bankruptcy_analysis(filepath: str, user_id: int) -> Dict:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ document_processor.py
    """
    from document_processor import process_uploaded_file
    from credit_parser import extract_credit_data_with_total
    from text_extractor import extract_text_from_pdf
    from ocr import ocr_file
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    result = process_uploaded_file(filepath, user_id)
    
    if result.get("type") == "credit_report":
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = extract_text_from_pdf(filepath)
            if not text.strip():
                text = ocr_file(filepath)
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            parsed_data = extract_credit_data_with_total(text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
            bankruptcy_analysis = analyze_credit_report_for_bankruptcy(parsed_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            result['bankruptcy_analysis'] = bankruptcy_analysis
            result['bankruptcy_data'] = parsed_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞: {e}")
            result['bankruptcy_analysis'] = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞: {str(e)}"
    
    return result